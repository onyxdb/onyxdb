/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.onyxdb.idm.generated.openapi.apis;

import com.onyxdb.idm.generated.openapi.models.Organization;
import com.onyxdb.idm.generated.openapi.models.OrganizationInput;
import java.util.UUID;
import com.onyxdb.idm.generated.openapi.models.UpdateOrganizationRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Organizations", description = "the Organizations API")
public interface OrganizationsApi {

    /**
     * POST /api/v1/organizations : Create organization
     *
     * @param organizationInput  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "createOrganization",
        summary = "Create organization",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Organization.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/organizations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Organization> createOrganization(
        @Parameter(name = "OrganizationInput", description = "", required = true) @Valid @RequestBody OrganizationInput organizationInput
    );


    /**
     * DELETE /api/v1/organizations/{organizationId} : Delete organization
     *
     * @param organizationId  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deleteOrganization",
        summary = "Delete organization",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/organizations/{organizationId}"
    )
    
    ResponseEntity<Void> deleteOrganization(
        @Parameter(name = "organizationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("organizationId") UUID organizationId
    );


    /**
     * GET /api/v1/organizations : Get all organizations
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllOrganizations",
        summary = "Get all organizations",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Organization.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/organizations",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Organization>> getAllOrganizations(
        
    );


    /**
     * GET /api/v1/organizations/{organizationId} : Get organization by ID
     *
     * @param organizationId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getOrganizationById",
        summary = "Get organization by ID",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Organization.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/organizations/{organizationId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Organization> getOrganizationById(
        @Parameter(name = "organizationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("organizationId") UUID organizationId
    );


    /**
     * PUT /api/v1/organizations/{organizationId} : Update organization
     *
     * @param organizationId  (required)
     * @param updateOrganizationRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateOrganization",
        summary = "Update organization",
        tags = { "Organizations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Organization.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/organizations/{organizationId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Organization> updateOrganization(
        @Parameter(name = "organizationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("organizationId") UUID organizationId,
        @Parameter(name = "UpdateOrganizationRequest", description = "", required = true) @Valid @RequestBody UpdateOrganizationRequest updateOrganizationRequest
    );

}
