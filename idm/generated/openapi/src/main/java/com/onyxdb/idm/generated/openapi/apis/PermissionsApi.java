/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.onyxdb.idm.generated.openapi.apis;

import com.onyxdb.idm.generated.openapi.models.Permission;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Permissions", description = "the Permissions API")
public interface PermissionsApi {

    /**
     * POST /api/v1/permissions : Create a new permission
     *
     * @param permission  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "createPermission",
        summary = "Create a new permission",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Permission.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/permissions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Permission> createPermission(
        @Parameter(name = "Permission", description = "", required = true) @Valid @RequestBody Permission permission
    );


    /**
     * DELETE /api/v1/permissions/{permissionId} : Delete a permission by ID
     *
     * @param permissionId  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deletePermission",
        summary = "Delete a permission by ID",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/permissions/{permissionId}"
    )
    
    ResponseEntity<Void> deletePermission(
        @Parameter(name = "permissionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") UUID permissionId
    );


    /**
     * GET /api/v1/permissions : Get all permissions
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllPermissions",
        summary = "Get all permissions",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Permission.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/permissions",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Permission>> getAllPermissions(
        
    );


    /**
     * GET /api/v1/permissions/{permissionId} : Get a permission by ID
     *
     * @param permissionId  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getPermissionById",
        summary = "Get a permission by ID",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Permission.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/permissions/{permissionId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Permission> getPermissionById(
        @Parameter(name = "permissionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") UUID permissionId
    );


    /**
     * PUT /api/v1/permissions/{permissionId} : Update a permission by ID
     *
     * @param permissionId  (required)
     * @param permission  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "updatePermission",
        summary = "Update a permission by ID",
        tags = { "Permissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Permission.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/permissions/{permissionId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Permission> updatePermission(
        @Parameter(name = "permissionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") UUID permissionId,
        @Parameter(name = "Permission", description = "", required = true) @Valid @RequestBody Permission permission
    );

}
