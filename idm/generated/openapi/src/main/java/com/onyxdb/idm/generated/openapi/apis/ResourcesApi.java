/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.onyxdb.idm.generated.openapi.apis;

import com.onyxdb.idm.generated.openapi.models.AssignRoleRequest;
import com.onyxdb.idm.generated.openapi.models.Role;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Resources", description = "the Resources API")
public interface ResourcesApi {

    /**
     * POST /api/v1/resources/{resourceId}/roles : Assign role to a resource
     *
     * @param resourceId  (required)
     * @param assignRoleRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "assignRoleToResource",
        summary = "Assign role to a resource",
        tags = { "Resources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/resources/{resourceId}/roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Role> assignRoleToResource(
        @Parameter(name = "resourceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("resourceId") UUID resourceId,
        @Parameter(name = "AssignRoleRequest", description = "", required = true) @Valid @RequestBody AssignRoleRequest assignRoleRequest
    );


    /**
     * GET /api/v1/resources/{resourceId}/roles : Get roles for a resource
     *
     * @param resourceId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRolesByResourceId",
        summary = "Get roles for a resource",
        tags = { "Resources" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Role.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/resources/{resourceId}/roles",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Role>> getRolesByResourceId(
        @Parameter(name = "resourceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("resourceId") UUID resourceId
    );

}
