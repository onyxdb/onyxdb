/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.onyxdb.idm.generated.openapi.apis;

import com.onyxdb.idm.generated.openapi.models.Group;
import com.onyxdb.idm.generated.openapi.models.GroupInput;
import java.util.UUID;
import com.onyxdb.idm.generated.openapi.models.UpdateGroupRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Groups", description = "the Groups API")
public interface GroupsApi {

    /**
     * POST /api/v1/groups : Create group
     *
     * @param groupInput  (required)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "createGroup",
        summary = "Create group",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Group> createGroup(
        @Parameter(name = "GroupInput", description = "", required = true) @Valid @RequestBody GroupInput groupInput
    );


    /**
     * DELETE /api/v1/groups/{groupId} : Delete group
     *
     * @param groupId  (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "deleteGroup",
        summary = "Delete group",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/groups/{groupId}"
    )
    
    ResponseEntity<Void> deleteGroup(
        @Parameter(name = "groupId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("groupId") UUID groupId
    );


    /**
     * GET /api/v1/groups : Get all groups
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllGroups",
        summary = "Get all groups",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Group.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/groups",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Group>> getAllGroups(
        
    );


    /**
     * GET /api/v1/groups/{groupId} : Get group by ID
     *
     * @param groupId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getGroupById",
        summary = "Get group by ID",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/groups/{groupId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Group> getGroupById(
        @Parameter(name = "groupId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("groupId") UUID groupId
    );


    /**
     * PUT /api/v1/groups/{groupId} : Update group
     *
     * @param groupId  (required)
     * @param updateGroupRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateGroup",
        summary = "Update group",
        tags = { "Groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/groups/{groupId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Group> updateGroup(
        @Parameter(name = "groupId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("groupId") UUID groupId,
        @Parameter(name = "UpdateGroupRequest", description = "", required = true) @Valid @RequestBody UpdateGroupRequest updateGroupRequest
    );

}
