/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.onyxdb.idm.generated.openapi.apis;

import com.onyxdb.idm.generated.openapi.models.ActionPermissionDTO;
import com.onyxdb.idm.generated.openapi.models.ApiPermissionDTO;
import com.onyxdb.idm.generated.openapi.models.BadRequestResponse;
import com.onyxdb.idm.generated.openapi.models.NotFoundResponse;
import com.onyxdb.idm.generated.openapi.models.RoleDTO;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "Roles", description = "the Roles API")
public interface RolesApi {

    /**
     * POST /api/v1/roles/{roleId}/action-permissions/{permissionId} : Add action permission to role link
     *
     * @param roleId  (required)
     * @param permissionId  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "addActionPermissionToRole",
        summary = "Add action permission to role link",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/roles/{roleId}/action-permissions/{permissionId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> addActionPermissionToRole(
        @Parameter(name = "roleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleId") UUID roleId,
        @Parameter(name = "permissionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") UUID permissionId
    );


    /**
     * POST /api/v1/roles/{roleId}/api-permissions/{permissionId} : Add Api permission to role link
     *
     * @param roleId  (required)
     * @param permissionId  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "addApiPermissionToRole",
        summary = "Add Api permission to role link",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/roles/{roleId}/api-permissions/{permissionId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> addApiPermissionToRole(
        @Parameter(name = "roleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleId") UUID roleId,
        @Parameter(name = "permissionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") UUID permissionId
    );


    /**
     * POST /api/v1/roles : Create a new role
     *
     * @param roleDTO  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "createRole",
        summary = "Create a new role",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoleDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<RoleDTO> createRole(
        @Parameter(name = "RoleDTO", description = "", required = true) @Valid @RequestBody RoleDTO roleDTO
    );


    /**
     * DELETE /api/v1/roles/{roleId} : Delete a role by ID
     *
     * @param roleId  (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "deleteRole",
        summary = "Delete a role by ID",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/roles/{roleId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteRole(
        @Parameter(name = "roleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleId") UUID roleId
    );


    /**
     * GET /api/v1/roles/{roleId}/action-permissions : Get role action permission
     *
     * @param roleId  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getActionPermissionsByRoleId",
        summary = "Get role action permission",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ActionPermissionDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/roles/{roleId}/action-permissions",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ActionPermissionDTO>> getActionPermissionsByRoleId(
        @Parameter(name = "roleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleId") UUID roleId
    );


    /**
     * GET /api/v1/roles : Get all roles
     *
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "getAllRoles",
        summary = "Get all roles",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RoleDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/roles",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<RoleDTO>> getAllRoles(
        
    );


    /**
     * GET /api/v1/roles/{roleId}/api-permissions : Get role Api permission
     *
     * @param roleId  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getApiPermissionsByRoleId",
        summary = "Get role Api permission",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApiPermissionDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/roles/{roleId}/api-permissions",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ApiPermissionDTO>> getApiPermissionsByRoleId(
        @Parameter(name = "roleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleId") UUID roleId
    );


    /**
     * GET /api/v1/roles/{roleId} : Get a role by ID
     *
     * @param roleId  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "getRoleById",
        summary = "Get a role by ID",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoleDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/roles/{roleId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<RoleDTO> getRoleById(
        @Parameter(name = "roleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleId") UUID roleId
    );


    /**
     * DELETE /api/v1/roles/{roleId}/action-permissions/{permissionId} : Delete Action permission to role link
     *
     * @param roleId  (required)
     * @param permissionId  (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "removeActionPermissionFromRole",
        summary = "Delete Action permission to role link",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/roles/{roleId}/action-permissions/{permissionId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> removeActionPermissionFromRole(
        @Parameter(name = "roleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleId") UUID roleId,
        @Parameter(name = "permissionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") UUID permissionId
    );


    /**
     * DELETE /api/v1/roles/{roleId}/api-permissions/{permissionId} : Delete Api permission to role link
     *
     * @param roleId  (required)
     * @param permissionId  (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "removeApiPermissionFromRole",
        summary = "Delete Api permission to role link",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/roles/{roleId}/api-permissions/{permissionId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> removeApiPermissionFromRole(
        @Parameter(name = "roleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleId") UUID roleId,
        @Parameter(name = "permissionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") UUID permissionId
    );


    /**
     * PUT /api/v1/roles/{roleId} : Update a role by ID
     *
     * @param roleId  (required)
     * @param roleDTO  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "updateRole",
        summary = "Update a role by ID",
        tags = { "Roles" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RoleDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/roles/{roleId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<RoleDTO> updateRole(
        @Parameter(name = "roleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("roleId") UUID roleId,
        @Parameter(name = "RoleDTO", description = "", required = true) @Valid @RequestBody RoleDTO roleDTO
    );

}
