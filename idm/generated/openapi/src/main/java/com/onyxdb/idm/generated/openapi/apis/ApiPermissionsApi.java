/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.onyxdb.idm.generated.openapi.apis;

import com.onyxdb.idm.generated.openapi.models.ApiPermissionDTO;
import com.onyxdb.idm.generated.openapi.models.BadRequestResponse;
import com.onyxdb.idm.generated.openapi.models.NotFoundResponse;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "ApiPermissions", description = "the ApiPermissions API")
public interface ApiPermissionsApi {

    /**
     * POST /api/v1/api-permissions : Create an Api new permission
     *
     * @param apiPermissionDTO  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "createApiPermission",
        summary = "Create an Api new permission",
        tags = { "ApiPermissions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiPermissionDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/api-permissions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ApiPermissionDTO> createApiPermission(
        @Parameter(name = "ApiPermissionDTO", description = "", required = true) @Valid @RequestBody ApiPermissionDTO apiPermissionDTO
    );


    /**
     * DELETE /api/v1/api-permissions/{permissionId} : Delete an Api permission by ID
     *
     * @param permissionId  (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "deleteApiPermission",
        summary = "Delete an Api permission by ID",
        tags = { "ApiPermissions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/api-permissions/{permissionId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteApiPermission(
        @Parameter(name = "permissionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") UUID permissionId
    );


    /**
     * GET /api/v1/api-permissions : Get all Api permissions
     *
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "getAllApiPermissions",
        summary = "Get all Api permissions",
        tags = { "ApiPermissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApiPermissionDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/api-permissions",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<ApiPermissionDTO>> getAllApiPermissions(
        
    );


    /**
     * GET /api/v1/api-permissions/{permissionId} : Get an Api permission by ID
     *
     * @param permissionId  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "getApiPermissionById",
        summary = "Get an Api permission by ID",
        tags = { "ApiPermissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiPermissionDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/api-permissions/{permissionId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ApiPermissionDTO> getApiPermissionById(
        @Parameter(name = "permissionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") UUID permissionId
    );


    /**
     * PUT /api/v1/api-permissions/{permissionId} : Update an Api permission by ID
     *
     * @param permissionId  (required)
     * @param apiPermissionDTO  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "updateApiPermission",
        summary = "Update an Api permission by ID",
        tags = { "ApiPermissions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiPermissionDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/api-permissions/{permissionId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ApiPermissionDTO> updateApiPermission(
        @Parameter(name = "permissionId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("permissionId") UUID permissionId,
        @Parameter(name = "ApiPermissionDTO", description = "", required = true) @Valid @RequestBody ApiPermissionDTO apiPermissionDTO
    );

}
