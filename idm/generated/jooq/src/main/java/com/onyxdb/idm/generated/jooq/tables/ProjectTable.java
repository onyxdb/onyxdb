/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.records.ProjectTableRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectTable extends TableImpl<ProjectTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.project_table</code>
     */
    public static final ProjectTable PROJECT_TABLE = new ProjectTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectTableRecord> getRecordType() {
        return ProjectTableRecord.class;
    }

    /**
     * The column <code>public.project_table.id</code>.
     */
    public final TableField<ProjectTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.project_table.name</code>.
     */
    public final TableField<ProjectTableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.project_table.description</code>.
     */
    public final TableField<ProjectTableRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.project_table.created_at</code>.
     */
    public final TableField<ProjectTableRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.project_table.updated_at</code>.
     */
    public final TableField<ProjectTableRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.project_table.resource_id</code>.
     */
    public final TableField<ProjectTableRecord, UUID> RESOURCE_ID = createField(DSL.name("resource_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.project_table.organization_id</code>.
     */
    public final TableField<ProjectTableRecord, UUID> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.project_table.owner_id</code>.
     */
    public final TableField<ProjectTableRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID, this, "");

    private ProjectTable(Name alias, Table<ProjectTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectTable(Name alias, Table<ProjectTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.project_table</code> table reference
     */
    public ProjectTable(String alias) {
        this(DSL.name(alias), PROJECT_TABLE);
    }

    /**
     * Create an aliased <code>public.project_table</code> table reference
     */
    public ProjectTable(Name alias) {
        this(alias, PROJECT_TABLE);
    }

    /**
     * Create a <code>public.project_table</code> table reference
     */
    public ProjectTable() {
        this(DSL.name("project_table"), null);
    }

    public <O extends Record> ProjectTable(Table<O> child, ForeignKey<O, ProjectTableRecord> key) {
        super(child, key, PROJECT_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProjectTableRecord> getPrimaryKey() {
        return Keys.PROJECT_TABLE_PKEY;
    }

    @Override
    public List<UniqueKey<ProjectTableRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PROJECT_TABLE_RESOURCE_ID_KEY, Keys.PROJECT_TABLE_ORGANIZATION_ID_KEY);
    }

    @Override
    public List<ForeignKey<ProjectTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROJECT_TABLE__PROJECT_TABLE_RESOURCE_ID_FKEY, Keys.PROJECT_TABLE__PROJECT_TABLE_ORGANIZATION_ID_FKEY, Keys.PROJECT_TABLE__PROJECT_TABLE_OWNER_ID_FKEY);
    }

    private transient ResourceTable _resourceTable;
    private transient OrganizationTable _organizationTable;
    private transient AccountTable _accountTable;

    /**
     * Get the implicit join path to the <code>public.resource_table</code>
     * table.
     */
    public ResourceTable resourceTable() {
        if (_resourceTable == null)
            _resourceTable = new ResourceTable(this, Keys.PROJECT_TABLE__PROJECT_TABLE_RESOURCE_ID_FKEY);

        return _resourceTable;
    }

    /**
     * Get the implicit join path to the <code>public.organization_table</code>
     * table.
     */
    public OrganizationTable organizationTable() {
        if (_organizationTable == null)
            _organizationTable = new OrganizationTable(this, Keys.PROJECT_TABLE__PROJECT_TABLE_ORGANIZATION_ID_FKEY);

        return _organizationTable;
    }

    /**
     * Get the implicit join path to the <code>public.account_table</code>
     * table.
     */
    public AccountTable accountTable() {
        if (_accountTable == null)
            _accountTable = new AccountTable(this, Keys.PROJECT_TABLE__PROJECT_TABLE_OWNER_ID_FKEY);

        return _accountTable;
    }

    @Override
    public ProjectTable as(String alias) {
        return new ProjectTable(DSL.name(alias), this);
    }

    @Override
    public ProjectTable as(Name alias) {
        return new ProjectTable(alias, this);
    }

    @Override
    public ProjectTable as(Table<?> alias) {
        return new ProjectTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectTable rename(String name) {
        return new ProjectTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectTable rename(Name name) {
        return new ProjectTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectTable rename(Table<?> name) {
        return new ProjectTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, LocalDateTime, LocalDateTime, UUID, UUID, UUID> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super UUID, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super UUID, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
