/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.records.PermissionTableRecord;

import java.time.LocalDateTime;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PermissionTable extends TableImpl<PermissionTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.permission_table</code>
     */
    public static final PermissionTable PERMISSION_TABLE = new PermissionTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionTableRecord> getRecordType() {
        return PermissionTableRecord.class;
    }

    /**
     * The column <code>public.permission_table.id</code>.
     */
    public final TableField<PermissionTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.permission_table.action_type</code>.
     */
    public final TableField<PermissionTableRecord, String> ACTION_TYPE = createField(DSL.name("action_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.permission_table.resource_type</code>.
     */
    public final TableField<PermissionTableRecord, String> RESOURCE_TYPE = createField(DSL.name("resource_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.permission_table.resource_fields</code>.
     */
    public final TableField<PermissionTableRecord, String[]> RESOURCE_FIELDS = createField(DSL.name("resource_fields"), SQLDataType.VARCHAR(255).getArrayDataType(), this, "");

    /**
     * The column <code>public.permission_table.created_at</code>.
     */
    public final TableField<PermissionTableRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.permission_table.updated_at</code>.
     */
    public final TableField<PermissionTableRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private PermissionTable(Name alias, Table<PermissionTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private PermissionTable(Name alias, Table<PermissionTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.permission_table</code> table reference
     */
    public PermissionTable(String alias) {
        this(DSL.name(alias), PERMISSION_TABLE);
    }

    /**
     * Create an aliased <code>public.permission_table</code> table reference
     */
    public PermissionTable(Name alias) {
        this(alias, PERMISSION_TABLE);
    }

    /**
     * Create a <code>public.permission_table</code> table reference
     */
    public PermissionTable() {
        this(DSL.name("permission_table"), null);
    }

    public <O extends Record> PermissionTable(Table<O> child, ForeignKey<O, PermissionTableRecord> key) {
        super(child, key, PERMISSION_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PermissionTableRecord> getPrimaryKey() {
        return Keys.PERMISSION_TABLE_PKEY;
    }

    @Override
    public PermissionTable as(String alias) {
        return new PermissionTable(DSL.name(alias), this);
    }

    @Override
    public PermissionTable as(Name alias) {
        return new PermissionTable(alias, this);
    }

    @Override
    public PermissionTable as(Table<?> alias) {
        return new PermissionTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PermissionTable rename(String name) {
        return new PermissionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PermissionTable rename(Name name) {
        return new PermissionTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PermissionTable rename(Table<?> name) {
        return new PermissionTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, String[], LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super String, ? super String, ? super String[], ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super String, ? super String, ? super String[], ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
