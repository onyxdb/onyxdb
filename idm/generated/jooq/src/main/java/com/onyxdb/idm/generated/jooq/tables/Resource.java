/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.AccountResourceRole.AccountResourceRolePath;
import com.onyxdb.idm.generated.jooq.tables.Organization.OrganizationPath;
import com.onyxdb.idm.generated.jooq.tables.Project.ProjectPath;
import com.onyxdb.idm.generated.jooq.tables.Service.ServicePath;
import com.onyxdb.idm.generated.jooq.tables.records.ResourceRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Resource extends TableImpl<ResourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.resource</code>
     */
    public static final Resource RESOURCE = new Resource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResourceRecord> getRecordType() {
        return ResourceRecord.class;
    }

    /**
     * The column <code>public.resource.id</code>.
     */
    public final TableField<ResourceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.resource.resource_type</code>.
     */
    public final TableField<ResourceRecord, String> RESOURCE_TYPE = createField(DSL.name("resource_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.resource.created_at</code>.
     */
    public final TableField<ResourceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.resource.updated_at</code>.
     */
    public final TableField<ResourceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Resource(Name alias, Table<ResourceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Resource(Name alias, Table<ResourceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.resource</code> table reference
     */
    public Resource(String alias) {
        this(DSL.name(alias), RESOURCE);
    }

    /**
     * Create an aliased <code>public.resource</code> table reference
     */
    public Resource(Name alias) {
        this(alias, RESOURCE);
    }

    /**
     * Create a <code>public.resource</code> table reference
     */
    public Resource() {
        this(DSL.name("resource"), null);
    }

    public <O extends Record> Resource(Table<O> path, ForeignKey<O, ResourceRecord> childPath, InverseForeignKey<O, ResourceRecord> parentPath) {
        super(path, childPath, parentPath, RESOURCE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ResourcePath extends Resource implements Path<ResourceRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ResourcePath(Table<O> path, ForeignKey<O, ResourceRecord> childPath, InverseForeignKey<O, ResourceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ResourcePath(Name alias, Table<ResourceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ResourcePath as(String alias) {
            return new ResourcePath(DSL.name(alias), this);
        }

        @Override
        public ResourcePath as(Name alias) {
            return new ResourcePath(alias, this);
        }

        @Override
        public ResourcePath as(Table<?> alias) {
            return new ResourcePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ResourceRecord, Integer> getIdentity() {
        return (Identity<ResourceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ResourceRecord> getPrimaryKey() {
        return Keys.RESOURCE_PKEY;
    }

    private transient AccountResourceRolePath _accountResourceRole;

    /**
     * Get the implicit to-many join path to the
     * <code>public.account_resource_role</code> table
     */
    public AccountResourceRolePath accountResourceRole() {
        if (_accountResourceRole == null)
            _accountResourceRole = new AccountResourceRolePath(this, null, Keys.ACCOUNT_RESOURCE_ROLE__ACCOUNT_RESOURCE_ROLE_RESOURCE_ID_FKEY.getInverseKey());

        return _accountResourceRole;
    }

    private transient OrganizationPath _organization;

    /**
     * Get the implicit to-many join path to the
     * <code>public.organization</code> table
     */
    public OrganizationPath organization() {
        if (_organization == null)
            _organization = new OrganizationPath(this, null, Keys.ORGANIZATION__ORGANIZATION_RESOURCE_ID_FKEY.getInverseKey());

        return _organization;
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit to-many join path to the <code>public.project</code>
     * table
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, null, Keys.PROJECT__PROJECT_RESOURCE_ID_FKEY.getInverseKey());

        return _project;
    }

    private transient ServicePath _service;

    /**
     * Get the implicit to-many join path to the <code>public.service</code>
     * table
     */
    public ServicePath service() {
        if (_service == null)
            _service = new ServicePath(this, null, Keys.SERVICE__SERVICE_RESOURCE_ID_FKEY.getInverseKey());

        return _service;
    }

    @Override
    public Resource as(String alias) {
        return new Resource(DSL.name(alias), this);
    }

    @Override
    public Resource as(Name alias) {
        return new Resource(alias, this);
    }

    @Override
    public Resource as(Table<?> alias) {
        return new Resource(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Resource rename(String name) {
        return new Resource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resource rename(Name name) {
        return new Resource(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resource rename(Table<?> name) {
        return new Resource(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resource where(Condition condition) {
        return new Resource(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resource where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resource where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resource where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resource where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resource where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resource where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resource where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resource whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resource whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
