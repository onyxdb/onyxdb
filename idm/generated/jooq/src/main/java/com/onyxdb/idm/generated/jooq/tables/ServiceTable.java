/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.records.ServiceTableRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceTable extends TableImpl<ServiceTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.service_table</code>
     */
    public static final ServiceTable SERVICE_TABLE = new ServiceTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceTableRecord> getRecordType() {
        return ServiceTableRecord.class;
    }

    /**
     * The column <code>public.service_table.id</code>.
     */
    public final TableField<ServiceTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.service_table.name</code>.
     */
    public final TableField<ServiceTableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.service_table.type</code>.
     */
    public final TableField<ServiceTableRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.service_table.project_id</code>.
     */
    public final TableField<ServiceTableRecord, UUID> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.UUID.nullable(false), this, "");

    private ServiceTable(Name alias, Table<ServiceTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServiceTable(Name alias, Table<ServiceTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.service_table</code> table reference
     */
    public ServiceTable(String alias) {
        this(DSL.name(alias), SERVICE_TABLE);
    }

    /**
     * Create an aliased <code>public.service_table</code> table reference
     */
    public ServiceTable(Name alias) {
        this(alias, SERVICE_TABLE);
    }

    /**
     * Create a <code>public.service_table</code> table reference
     */
    public ServiceTable() {
        this(DSL.name("service_table"), null);
    }

    public <O extends Record> ServiceTable(Table<O> child, ForeignKey<O, ServiceTableRecord> key) {
        super(child, key, SERVICE_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ServiceTableRecord> getPrimaryKey() {
        return Keys.SERVICE_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<ServiceTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVICE_TABLE__SERVICE_TABLE_PROJECT_ID_FKEY);
    }

    private transient ProjectTable _projectTable;

    /**
     * Get the implicit join path to the <code>public.project_table</code>
     * table.
     */
    public ProjectTable projectTable() {
        if (_projectTable == null)
            _projectTable = new ProjectTable(this, Keys.SERVICE_TABLE__SERVICE_TABLE_PROJECT_ID_FKEY);

        return _projectTable;
    }

    @Override
    public ServiceTable as(String alias) {
        return new ServiceTable(DSL.name(alias), this);
    }

    @Override
    public ServiceTable as(Name alias) {
        return new ServiceTable(alias, this);
    }

    @Override
    public ServiceTable as(Table<?> alias) {
        return new ServiceTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceTable rename(String name) {
        return new ServiceTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceTable rename(Name name) {
        return new ServiceTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceTable rename(Table<?> name) {
        return new ServiceTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
