/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq;


import com.onyxdb.idm.generated.jooq.tables.AccountBusinessRoleTable;
import com.onyxdb.idm.generated.jooq.tables.AccountOuTable;
import com.onyxdb.idm.generated.jooq.tables.AccountRoleTable;
import com.onyxdb.idm.generated.jooq.tables.AccountTable;
import com.onyxdb.idm.generated.jooq.tables.BusinessRoleRoleTable;
import com.onyxdb.idm.generated.jooq.tables.BusinessRoleTable;
import com.onyxdb.idm.generated.jooq.tables.DomainComponentTable;
import com.onyxdb.idm.generated.jooq.tables.OrganizationTable;
import com.onyxdb.idm.generated.jooq.tables.OrganizationUnitTable;
import com.onyxdb.idm.generated.jooq.tables.PermissionTable;
import com.onyxdb.idm.generated.jooq.tables.ProjectTable;
import com.onyxdb.idm.generated.jooq.tables.ResourceTable;
import com.onyxdb.idm.generated.jooq.tables.RolePermissionTable;
import com.onyxdb.idm.generated.jooq.tables.RoleTable;
import com.onyxdb.idm.generated.jooq.tables.ServiceTable;
import com.onyxdb.idm.generated.jooq.tables.records.AccountBusinessRoleTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.AccountOuTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.AccountRoleTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.AccountTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.BusinessRoleRoleTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.BusinessRoleTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.DomainComponentTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.OrganizationTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.OrganizationUnitTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.PermissionTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.ProjectTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.ResourceTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.RolePermissionTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.RoleTableRecord;
import com.onyxdb.idm.generated.jooq.tables.records.ServiceTableRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountBusinessRoleTableRecord> ACCOUNT_BUSINESS_ROLE_TABLE_PKEY = Internal.createUniqueKey(AccountBusinessRoleTable.ACCOUNT_BUSINESS_ROLE_TABLE, DSL.name("account_business_role_table_pkey"), new TableField[] { AccountBusinessRoleTable.ACCOUNT_BUSINESS_ROLE_TABLE.ACCOUNT_ID, AccountBusinessRoleTable.ACCOUNT_BUSINESS_ROLE_TABLE.BUSINESS_ROLE_ID }, true);
    public static final UniqueKey<AccountOuTableRecord> ACCOUNT_OU_TABLE_PKEY = Internal.createUniqueKey(AccountOuTable.ACCOUNT_OU_TABLE, DSL.name("account_ou_table_pkey"), new TableField[] { AccountOuTable.ACCOUNT_OU_TABLE.ACCOUNT_ID, AccountOuTable.ACCOUNT_OU_TABLE.OU_ID }, true);
    public static final UniqueKey<AccountRoleTableRecord> ACCOUNT_ROLE_TABLE_PKEY = Internal.createUniqueKey(AccountRoleTable.ACCOUNT_ROLE_TABLE, DSL.name("account_role_table_pkey"), new TableField[] { AccountRoleTable.ACCOUNT_ROLE_TABLE.ACCOUNT_ID, AccountRoleTable.ACCOUNT_ROLE_TABLE.ROLE_ID }, true);
    public static final UniqueKey<AccountTableRecord> ACCOUNT_TABLE_EMAIL_KEY = Internal.createUniqueKey(AccountTable.ACCOUNT_TABLE, DSL.name("account_table_email_key"), new TableField[] { AccountTable.ACCOUNT_TABLE.EMAIL }, true);
    public static final UniqueKey<AccountTableRecord> ACCOUNT_TABLE_PKEY = Internal.createUniqueKey(AccountTable.ACCOUNT_TABLE, DSL.name("account_table_pkey"), new TableField[] { AccountTable.ACCOUNT_TABLE.ID }, true);
    public static final UniqueKey<AccountTableRecord> ACCOUNT_TABLE_USERNAME_KEY = Internal.createUniqueKey(AccountTable.ACCOUNT_TABLE, DSL.name("account_table_username_key"), new TableField[] { AccountTable.ACCOUNT_TABLE.USERNAME }, true);
    public static final UniqueKey<BusinessRoleRoleTableRecord> BUSINESS_ROLE_ROLE_TABLE_PKEY = Internal.createUniqueKey(BusinessRoleRoleTable.BUSINESS_ROLE_ROLE_TABLE, DSL.name("business_role_role_table_pkey"), new TableField[] { BusinessRoleRoleTable.BUSINESS_ROLE_ROLE_TABLE.BUSINESS_ROLE_ID, BusinessRoleRoleTable.BUSINESS_ROLE_ROLE_TABLE.ROLE_ID }, true);
    public static final UniqueKey<BusinessRoleTableRecord> BUSINESS_ROLE_TABLE_NAME_KEY = Internal.createUniqueKey(BusinessRoleTable.BUSINESS_ROLE_TABLE, DSL.name("business_role_table_name_key"), new TableField[] { BusinessRoleTable.BUSINESS_ROLE_TABLE.NAME }, true);
    public static final UniqueKey<BusinessRoleTableRecord> BUSINESS_ROLE_TABLE_PKEY = Internal.createUniqueKey(BusinessRoleTable.BUSINESS_ROLE_TABLE, DSL.name("business_role_table_pkey"), new TableField[] { BusinessRoleTable.BUSINESS_ROLE_TABLE.ID }, true);
    public static final UniqueKey<DomainComponentTableRecord> DOMAIN_COMPONENT_TABLE_NAME_KEY = Internal.createUniqueKey(DomainComponentTable.DOMAIN_COMPONENT_TABLE, DSL.name("domain_component_table_name_key"), new TableField[] { DomainComponentTable.DOMAIN_COMPONENT_TABLE.NAME }, true);
    public static final UniqueKey<DomainComponentTableRecord> DOMAIN_COMPONENT_TABLE_PKEY = Internal.createUniqueKey(DomainComponentTable.DOMAIN_COMPONENT_TABLE, DSL.name("domain_component_table_pkey"), new TableField[] { DomainComponentTable.DOMAIN_COMPONENT_TABLE.ID }, true);
    public static final UniqueKey<OrganizationTableRecord> ORGANIZATION_TABLE_PKEY = Internal.createUniqueKey(OrganizationTable.ORGANIZATION_TABLE, DSL.name("organization_table_pkey"), new TableField[] { OrganizationTable.ORGANIZATION_TABLE.ID }, true);
    public static final UniqueKey<OrganizationTableRecord> ORGANIZATION_TABLE_RESOURCE_ID_KEY = Internal.createUniqueKey(OrganizationTable.ORGANIZATION_TABLE, DSL.name("organization_table_resource_id_key"), new TableField[] { OrganizationTable.ORGANIZATION_TABLE.RESOURCE_ID }, true);
    public static final UniqueKey<OrganizationUnitTableRecord> ORGANIZATION_UNIT_TABLE_PKEY = Internal.createUniqueKey(OrganizationUnitTable.ORGANIZATION_UNIT_TABLE, DSL.name("organization_unit_table_pkey"), new TableField[] { OrganizationUnitTable.ORGANIZATION_UNIT_TABLE.ID }, true);
    public static final UniqueKey<PermissionTableRecord> PERMISSION_TABLE_PKEY = Internal.createUniqueKey(PermissionTable.PERMISSION_TABLE, DSL.name("permission_table_pkey"), new TableField[] { PermissionTable.PERMISSION_TABLE.ID }, true);
    public static final UniqueKey<ProjectTableRecord> PROJECT_TABLE_ORGANIZATION_ID_KEY = Internal.createUniqueKey(ProjectTable.PROJECT_TABLE, DSL.name("project_table_organization_id_key"), new TableField[] { ProjectTable.PROJECT_TABLE.ORGANIZATION_ID }, true);
    public static final UniqueKey<ProjectTableRecord> PROJECT_TABLE_PKEY = Internal.createUniqueKey(ProjectTable.PROJECT_TABLE, DSL.name("project_table_pkey"), new TableField[] { ProjectTable.PROJECT_TABLE.ID }, true);
    public static final UniqueKey<ProjectTableRecord> PROJECT_TABLE_RESOURCE_ID_KEY = Internal.createUniqueKey(ProjectTable.PROJECT_TABLE, DSL.name("project_table_resource_id_key"), new TableField[] { ProjectTable.PROJECT_TABLE.RESOURCE_ID }, true);
    public static final UniqueKey<ResourceTableRecord> RESOURCE_TABLE_PKEY = Internal.createUniqueKey(ResourceTable.RESOURCE_TABLE, DSL.name("resource_table_pkey"), new TableField[] { ResourceTable.RESOURCE_TABLE.ID }, true);
    public static final UniqueKey<RolePermissionTableRecord> ROLE_PERMISSION_TABLE_PKEY = Internal.createUniqueKey(RolePermissionTable.ROLE_PERMISSION_TABLE, DSL.name("role_permission_table_pkey"), new TableField[] { RolePermissionTable.ROLE_PERMISSION_TABLE.ROLE_ID, RolePermissionTable.ROLE_PERMISSION_TABLE.PERMISSION_ID }, true);
    public static final UniqueKey<RoleTableRecord> ROLE_TABLE_NAME_KEY = Internal.createUniqueKey(RoleTable.ROLE_TABLE, DSL.name("role_table_name_key"), new TableField[] { RoleTable.ROLE_TABLE.NAME }, true);
    public static final UniqueKey<RoleTableRecord> ROLE_TABLE_PKEY = Internal.createUniqueKey(RoleTable.ROLE_TABLE, DSL.name("role_table_pkey"), new TableField[] { RoleTable.ROLE_TABLE.ID }, true);
    public static final UniqueKey<ServiceTableRecord> SERVICE_TABLE_PKEY = Internal.createUniqueKey(ServiceTable.SERVICE_TABLE, DSL.name("service_table_pkey"), new TableField[] { ServiceTable.SERVICE_TABLE.ID }, true);
    public static final UniqueKey<ServiceTableRecord> SERVICE_TABLE_PROJECT_ID_KEY = Internal.createUniqueKey(ServiceTable.SERVICE_TABLE, DSL.name("service_table_project_id_key"), new TableField[] { ServiceTable.SERVICE_TABLE.PROJECT_ID }, true);
    public static final UniqueKey<ServiceTableRecord> SERVICE_TABLE_RESOURCE_ID_KEY = Internal.createUniqueKey(ServiceTable.SERVICE_TABLE, DSL.name("service_table_resource_id_key"), new TableField[] { ServiceTable.SERVICE_TABLE.RESOURCE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountBusinessRoleTableRecord, AccountTableRecord> ACCOUNT_BUSINESS_ROLE_TABLE__ACCOUNT_BUSINESS_ROLE_TABLE_ACCOUNT_ID_FKEY = Internal.createForeignKey(AccountBusinessRoleTable.ACCOUNT_BUSINESS_ROLE_TABLE, DSL.name("account_business_role_table_account_id_fkey"), new TableField[] { AccountBusinessRoleTable.ACCOUNT_BUSINESS_ROLE_TABLE.ACCOUNT_ID }, Keys.ACCOUNT_TABLE_PKEY, new TableField[] { AccountTable.ACCOUNT_TABLE.ID }, true);
    public static final ForeignKey<AccountBusinessRoleTableRecord, BusinessRoleTableRecord> ACCOUNT_BUSINESS_ROLE_TABLE__ACCOUNT_BUSINESS_ROLE_TABLE_BUSINESS_ROLE_ID_FKEY = Internal.createForeignKey(AccountBusinessRoleTable.ACCOUNT_BUSINESS_ROLE_TABLE, DSL.name("account_business_role_table_business_role_id_fkey"), new TableField[] { AccountBusinessRoleTable.ACCOUNT_BUSINESS_ROLE_TABLE.BUSINESS_ROLE_ID }, Keys.BUSINESS_ROLE_TABLE_PKEY, new TableField[] { BusinessRoleTable.BUSINESS_ROLE_TABLE.ID }, true);
    public static final ForeignKey<AccountOuTableRecord, AccountTableRecord> ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_ACCOUNT_ID_FKEY = Internal.createForeignKey(AccountOuTable.ACCOUNT_OU_TABLE, DSL.name("account_ou_table_account_id_fkey"), new TableField[] { AccountOuTable.ACCOUNT_OU_TABLE.ACCOUNT_ID }, Keys.ACCOUNT_TABLE_PKEY, new TableField[] { AccountTable.ACCOUNT_TABLE.ID }, true);
    public static final ForeignKey<AccountOuTableRecord, OrganizationUnitTableRecord> ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_OU_ID_FKEY = Internal.createForeignKey(AccountOuTable.ACCOUNT_OU_TABLE, DSL.name("account_ou_table_ou_id_fkey"), new TableField[] { AccountOuTable.ACCOUNT_OU_TABLE.OU_ID }, Keys.ORGANIZATION_UNIT_TABLE_PKEY, new TableField[] { OrganizationUnitTable.ORGANIZATION_UNIT_TABLE.ID }, true);
    public static final ForeignKey<AccountRoleTableRecord, AccountTableRecord> ACCOUNT_ROLE_TABLE__ACCOUNT_ROLE_TABLE_ACCOUNT_ID_FKEY = Internal.createForeignKey(AccountRoleTable.ACCOUNT_ROLE_TABLE, DSL.name("account_role_table_account_id_fkey"), new TableField[] { AccountRoleTable.ACCOUNT_ROLE_TABLE.ACCOUNT_ID }, Keys.ACCOUNT_TABLE_PKEY, new TableField[] { AccountTable.ACCOUNT_TABLE.ID }, true);
    public static final ForeignKey<AccountRoleTableRecord, RoleTableRecord> ACCOUNT_ROLE_TABLE__ACCOUNT_ROLE_TABLE_ROLE_ID_FKEY = Internal.createForeignKey(AccountRoleTable.ACCOUNT_ROLE_TABLE, DSL.name("account_role_table_role_id_fkey"), new TableField[] { AccountRoleTable.ACCOUNT_ROLE_TABLE.ROLE_ID }, Keys.ROLE_TABLE_PKEY, new TableField[] { RoleTable.ROLE_TABLE.ID }, true);
    public static final ForeignKey<BusinessRoleRoleTableRecord, BusinessRoleTableRecord> BUSINESS_ROLE_ROLE_TABLE__BUSINESS_ROLE_ROLE_TABLE_BUSINESS_ROLE_ID_FKEY = Internal.createForeignKey(BusinessRoleRoleTable.BUSINESS_ROLE_ROLE_TABLE, DSL.name("business_role_role_table_business_role_id_fkey"), new TableField[] { BusinessRoleRoleTable.BUSINESS_ROLE_ROLE_TABLE.BUSINESS_ROLE_ID }, Keys.BUSINESS_ROLE_TABLE_PKEY, new TableField[] { BusinessRoleTable.BUSINESS_ROLE_TABLE.ID }, true);
    public static final ForeignKey<BusinessRoleRoleTableRecord, RoleTableRecord> BUSINESS_ROLE_ROLE_TABLE__BUSINESS_ROLE_ROLE_TABLE_ROLE_ID_FKEY = Internal.createForeignKey(BusinessRoleRoleTable.BUSINESS_ROLE_ROLE_TABLE, DSL.name("business_role_role_table_role_id_fkey"), new TableField[] { BusinessRoleRoleTable.BUSINESS_ROLE_ROLE_TABLE.ROLE_ID }, Keys.ROLE_TABLE_PKEY, new TableField[] { RoleTable.ROLE_TABLE.ID }, true);
    public static final ForeignKey<BusinessRoleTableRecord, BusinessRoleTableRecord> BUSINESS_ROLE_TABLE__BUSINESS_ROLE_TABLE_PARENT_ID_FKEY = Internal.createForeignKey(BusinessRoleTable.BUSINESS_ROLE_TABLE, DSL.name("business_role_table_parent_id_fkey"), new TableField[] { BusinessRoleTable.BUSINESS_ROLE_TABLE.PARENT_ID }, Keys.BUSINESS_ROLE_TABLE_PKEY, new TableField[] { BusinessRoleTable.BUSINESS_ROLE_TABLE.ID }, true);
    public static final ForeignKey<OrganizationTableRecord, AccountTableRecord> ORGANIZATION_TABLE__ORGANIZATION_TABLE_OWNER_ID_FKEY = Internal.createForeignKey(OrganizationTable.ORGANIZATION_TABLE, DSL.name("organization_table_owner_id_fkey"), new TableField[] { OrganizationTable.ORGANIZATION_TABLE.OWNER_ID }, Keys.ACCOUNT_TABLE_PKEY, new TableField[] { AccountTable.ACCOUNT_TABLE.ID }, true);
    public static final ForeignKey<OrganizationTableRecord, ResourceTableRecord> ORGANIZATION_TABLE__ORGANIZATION_TABLE_RESOURCE_ID_FKEY = Internal.createForeignKey(OrganizationTable.ORGANIZATION_TABLE, DSL.name("organization_table_resource_id_fkey"), new TableField[] { OrganizationTable.ORGANIZATION_TABLE.RESOURCE_ID }, Keys.RESOURCE_TABLE_PKEY, new TableField[] { ResourceTable.RESOURCE_TABLE.ID }, true);
    public static final ForeignKey<OrganizationUnitTableRecord, DomainComponentTableRecord> ORGANIZATION_UNIT_TABLE__ORGANIZATION_UNIT_TABLE_DOMAIN_COMPONENT_ID_FKEY = Internal.createForeignKey(OrganizationUnitTable.ORGANIZATION_UNIT_TABLE, DSL.name("organization_unit_table_domain_component_id_fkey"), new TableField[] { OrganizationUnitTable.ORGANIZATION_UNIT_TABLE.DOMAIN_COMPONENT_ID }, Keys.DOMAIN_COMPONENT_TABLE_PKEY, new TableField[] { DomainComponentTable.DOMAIN_COMPONENT_TABLE.ID }, true);
    public static final ForeignKey<OrganizationUnitTableRecord, OrganizationUnitTableRecord> ORGANIZATION_UNIT_TABLE__ORGANIZATION_UNIT_TABLE_PARENT_ID_FKEY = Internal.createForeignKey(OrganizationUnitTable.ORGANIZATION_UNIT_TABLE, DSL.name("organization_unit_table_parent_id_fkey"), new TableField[] { OrganizationUnitTable.ORGANIZATION_UNIT_TABLE.PARENT_ID }, Keys.ORGANIZATION_UNIT_TABLE_PKEY, new TableField[] { OrganizationUnitTable.ORGANIZATION_UNIT_TABLE.ID }, true);
    public static final ForeignKey<ProjectTableRecord, OrganizationTableRecord> PROJECT_TABLE__PROJECT_TABLE_ORGANIZATION_ID_FKEY = Internal.createForeignKey(ProjectTable.PROJECT_TABLE, DSL.name("project_table_organization_id_fkey"), new TableField[] { ProjectTable.PROJECT_TABLE.ORGANIZATION_ID }, Keys.ORGANIZATION_TABLE_PKEY, new TableField[] { OrganizationTable.ORGANIZATION_TABLE.ID }, true);
    public static final ForeignKey<ProjectTableRecord, AccountTableRecord> PROJECT_TABLE__PROJECT_TABLE_OWNER_ID_FKEY = Internal.createForeignKey(ProjectTable.PROJECT_TABLE, DSL.name("project_table_owner_id_fkey"), new TableField[] { ProjectTable.PROJECT_TABLE.OWNER_ID }, Keys.ACCOUNT_TABLE_PKEY, new TableField[] { AccountTable.ACCOUNT_TABLE.ID }, true);
    public static final ForeignKey<ProjectTableRecord, ResourceTableRecord> PROJECT_TABLE__PROJECT_TABLE_RESOURCE_ID_FKEY = Internal.createForeignKey(ProjectTable.PROJECT_TABLE, DSL.name("project_table_resource_id_fkey"), new TableField[] { ProjectTable.PROJECT_TABLE.RESOURCE_ID }, Keys.RESOURCE_TABLE_PKEY, new TableField[] { ResourceTable.RESOURCE_TABLE.ID }, true);
    public static final ForeignKey<RolePermissionTableRecord, PermissionTableRecord> ROLE_PERMISSION_TABLE__ROLE_PERMISSION_TABLE_PERMISSION_ID_FKEY = Internal.createForeignKey(RolePermissionTable.ROLE_PERMISSION_TABLE, DSL.name("role_permission_table_permission_id_fkey"), new TableField[] { RolePermissionTable.ROLE_PERMISSION_TABLE.PERMISSION_ID }, Keys.PERMISSION_TABLE_PKEY, new TableField[] { PermissionTable.PERMISSION_TABLE.ID }, true);
    public static final ForeignKey<RolePermissionTableRecord, RoleTableRecord> ROLE_PERMISSION_TABLE__ROLE_PERMISSION_TABLE_ROLE_ID_FKEY = Internal.createForeignKey(RolePermissionTable.ROLE_PERMISSION_TABLE, DSL.name("role_permission_table_role_id_fkey"), new TableField[] { RolePermissionTable.ROLE_PERMISSION_TABLE.ROLE_ID }, Keys.ROLE_TABLE_PKEY, new TableField[] { RoleTable.ROLE_TABLE.ID }, true);
    public static final ForeignKey<RoleTableRecord, ResourceTableRecord> ROLE_TABLE__ROLE_TABLE_RESOURCE_ID_FKEY = Internal.createForeignKey(RoleTable.ROLE_TABLE, DSL.name("role_table_resource_id_fkey"), new TableField[] { RoleTable.ROLE_TABLE.RESOURCE_ID }, Keys.RESOURCE_TABLE_PKEY, new TableField[] { ResourceTable.RESOURCE_TABLE.ID }, true);
    public static final ForeignKey<ServiceTableRecord, AccountTableRecord> SERVICE_TABLE__SERVICE_TABLE_OWNER_ID_FKEY = Internal.createForeignKey(ServiceTable.SERVICE_TABLE, DSL.name("service_table_owner_id_fkey"), new TableField[] { ServiceTable.SERVICE_TABLE.OWNER_ID }, Keys.ACCOUNT_TABLE_PKEY, new TableField[] { AccountTable.ACCOUNT_TABLE.ID }, true);
    public static final ForeignKey<ServiceTableRecord, ProjectTableRecord> SERVICE_TABLE__SERVICE_TABLE_PROJECT_ID_FKEY = Internal.createForeignKey(ServiceTable.SERVICE_TABLE, DSL.name("service_table_project_id_fkey"), new TableField[] { ServiceTable.SERVICE_TABLE.PROJECT_ID }, Keys.PROJECT_TABLE_PKEY, new TableField[] { ProjectTable.PROJECT_TABLE.ID }, true);
    public static final ForeignKey<ServiceTableRecord, ResourceTableRecord> SERVICE_TABLE__SERVICE_TABLE_RESOURCE_ID_FKEY = Internal.createForeignKey(ServiceTable.SERVICE_TABLE, DSL.name("service_table_resource_id_fkey"), new TableField[] { ServiceTable.SERVICE_TABLE.RESOURCE_ID }, Keys.RESOURCE_TABLE_PKEY, new TableField[] { ResourceTable.RESOURCE_TABLE.ID }, true);
}
