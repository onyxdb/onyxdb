/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.Project.ProjectPath;
import com.onyxdb.idm.generated.jooq.tables.Resource.ResourcePath;
import com.onyxdb.idm.generated.jooq.tables.records.ServiceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Service extends TableImpl<ServiceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.service</code>
     */
    public static final Service SERVICE = new Service();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceRecord> getRecordType() {
        return ServiceRecord.class;
    }

    /**
     * The column <code>public.service.id</code>.
     */
    public final TableField<ServiceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.service.name</code>.
     */
    public final TableField<ServiceRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.service.type</code>.
     */
    public final TableField<ServiceRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.service.description</code>.
     */
    public final TableField<ServiceRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.service.created_at</code>.
     */
    public final TableField<ServiceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.service.updated_at</code>.
     */
    public final TableField<ServiceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.service.resource_id</code>.
     */
    public final TableField<ServiceRecord, Integer> RESOURCE_ID = createField(DSL.name("resource_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.service.project_id</code>.
     */
    public final TableField<ServiceRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Service(Name alias, Table<ServiceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Service(Name alias, Table<ServiceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.service</code> table reference
     */
    public Service(String alias) {
        this(DSL.name(alias), SERVICE);
    }

    /**
     * Create an aliased <code>public.service</code> table reference
     */
    public Service(Name alias) {
        this(alias, SERVICE);
    }

    /**
     * Create a <code>public.service</code> table reference
     */
    public Service() {
        this(DSL.name("service"), null);
    }

    public <O extends Record> Service(Table<O> path, ForeignKey<O, ServiceRecord> childPath, InverseForeignKey<O, ServiceRecord> parentPath) {
        super(path, childPath, parentPath, SERVICE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ServicePath extends Service implements Path<ServiceRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ServicePath(Table<O> path, ForeignKey<O, ServiceRecord> childPath, InverseForeignKey<O, ServiceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ServicePath(Name alias, Table<ServiceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ServicePath as(String alias) {
            return new ServicePath(DSL.name(alias), this);
        }

        @Override
        public ServicePath as(Name alias) {
            return new ServicePath(alias, this);
        }

        @Override
        public ServicePath as(Table<?> alias) {
            return new ServicePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ServiceRecord, Integer> getIdentity() {
        return (Identity<ServiceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ServiceRecord> getPrimaryKey() {
        return Keys.SERVICE_PKEY;
    }

    @Override
    public List<UniqueKey<ServiceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SERVICE_PROJECT_ID_KEY, Keys.SERVICE_RESOURCE_ID_KEY);
    }

    @Override
    public List<ForeignKey<ServiceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVICE__SERVICE_PROJECT_ID_FKEY, Keys.SERVICE__SERVICE_RESOURCE_ID_FKEY);
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.project</code> table.
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, Keys.SERVICE__SERVICE_PROJECT_ID_FKEY, null);

        return _project;
    }

    private transient ResourcePath _resource;

    /**
     * Get the implicit join path to the <code>public.resource</code> table.
     */
    public ResourcePath resource() {
        if (_resource == null)
            _resource = new ResourcePath(this, Keys.SERVICE__SERVICE_RESOURCE_ID_FKEY, null);

        return _resource;
    }

    @Override
    public Service as(String alias) {
        return new Service(DSL.name(alias), this);
    }

    @Override
    public Service as(Name alias) {
        return new Service(alias, this);
    }

    @Override
    public Service as(Table<?> alias) {
        return new Service(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Service rename(String name) {
        return new Service(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Service rename(Name name) {
        return new Service(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Service rename(Table<?> name) {
        return new Service(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Service where(Condition condition) {
        return new Service(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Service where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Service where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Service where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Service where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Service where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Service where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Service where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Service whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Service whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, LocalDateTime, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
