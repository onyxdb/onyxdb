/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.RoleApiPermissionTable.RoleApiPermissionTablePath;
import com.onyxdb.idm.generated.jooq.tables.RoleTable.RoleTablePath;
import com.onyxdb.idm.generated.jooq.tables.records.ApiPermissionTableRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ApiPermissionTable extends TableImpl<ApiPermissionTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.api_permission_table</code>
     */
    public static final ApiPermissionTable API_PERMISSION_TABLE = new ApiPermissionTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiPermissionTableRecord> getRecordType() {
        return ApiPermissionTableRecord.class;
    }

    /**
     * The column <code>public.api_permission_table.id</code>.
     */
    public final TableField<ApiPermissionTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.api_permission_table.api_path_regexp</code>.
     */
    public final TableField<ApiPermissionTableRecord, String> API_PATH_REGEXP = createField(DSL.name("api_path_regexp"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.api_permission_table.created_at</code>.
     */
    public final TableField<ApiPermissionTableRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.api_permission_table.updated_at</code>.
     */
    public final TableField<ApiPermissionTableRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private ApiPermissionTable(Name alias, Table<ApiPermissionTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ApiPermissionTable(Name alias, Table<ApiPermissionTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.api_permission_table</code> table
     * reference
     */
    public ApiPermissionTable(String alias) {
        this(DSL.name(alias), API_PERMISSION_TABLE);
    }

    /**
     * Create an aliased <code>public.api_permission_table</code> table
     * reference
     */
    public ApiPermissionTable(Name alias) {
        this(alias, API_PERMISSION_TABLE);
    }

    /**
     * Create a <code>public.api_permission_table</code> table reference
     */
    public ApiPermissionTable() {
        this(DSL.name("api_permission_table"), null);
    }

    public <O extends Record> ApiPermissionTable(Table<O> path, ForeignKey<O, ApiPermissionTableRecord> childPath, InverseForeignKey<O, ApiPermissionTableRecord> parentPath) {
        super(path, childPath, parentPath, API_PERMISSION_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ApiPermissionTablePath extends ApiPermissionTable implements Path<ApiPermissionTableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ApiPermissionTablePath(Table<O> path, ForeignKey<O, ApiPermissionTableRecord> childPath, InverseForeignKey<O, ApiPermissionTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ApiPermissionTablePath(Name alias, Table<ApiPermissionTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ApiPermissionTablePath as(String alias) {
            return new ApiPermissionTablePath(DSL.name(alias), this);
        }

        @Override
        public ApiPermissionTablePath as(Name alias) {
            return new ApiPermissionTablePath(alias, this);
        }

        @Override
        public ApiPermissionTablePath as(Table<?> alias) {
            return new ApiPermissionTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ApiPermissionTableRecord> getPrimaryKey() {
        return Keys.API_PERMISSION_TABLE_PKEY;
    }

    private transient RoleApiPermissionTablePath _roleApiPermissionTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.role_api_permission_table</code> table
     */
    public RoleApiPermissionTablePath roleApiPermissionTable() {
        if (_roleApiPermissionTable == null)
            _roleApiPermissionTable = new RoleApiPermissionTablePath(this, null, Keys.ROLE_API_PERMISSION_TABLE__ROLE_API_PERMISSION_TABLE_API_PERMISSION_ID_FKEY.getInverseKey());

        return _roleApiPermissionTable;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.role_table</code> table
     */
    public RoleTablePath roleTable() {
        return roleApiPermissionTable().roleTable();
    }

    @Override
    public ApiPermissionTable as(String alias) {
        return new ApiPermissionTable(DSL.name(alias), this);
    }

    @Override
    public ApiPermissionTable as(Name alias) {
        return new ApiPermissionTable(alias, this);
    }

    @Override
    public ApiPermissionTable as(Table<?> alias) {
        return new ApiPermissionTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiPermissionTable rename(String name) {
        return new ApiPermissionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiPermissionTable rename(Name name) {
        return new ApiPermissionTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiPermissionTable rename(Table<?> name) {
        return new ApiPermissionTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiPermissionTable where(Condition condition) {
        return new ApiPermissionTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiPermissionTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiPermissionTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiPermissionTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApiPermissionTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApiPermissionTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApiPermissionTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApiPermissionTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiPermissionTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApiPermissionTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
