/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.AccountBusinessRoleTable.AccountBusinessRoleTablePath;
import com.onyxdb.idm.generated.jooq.tables.AccountOuTable.AccountOuTablePath;
import com.onyxdb.idm.generated.jooq.tables.AccountResourceRoleTable.AccountResourceRoleTablePath;
import com.onyxdb.idm.generated.jooq.tables.AccountRoleTable.AccountRoleTablePath;
import com.onyxdb.idm.generated.jooq.tables.BusinessRoleTable.BusinessRoleTablePath;
import com.onyxdb.idm.generated.jooq.tables.OrganizationTable.OrganizationTablePath;
import com.onyxdb.idm.generated.jooq.tables.OrganizationUnitTable.OrganizationUnitTablePath;
import com.onyxdb.idm.generated.jooq.tables.ProjectTable.ProjectTablePath;
import com.onyxdb.idm.generated.jooq.tables.RoleTable.RoleTablePath;
import com.onyxdb.idm.generated.jooq.tables.ServiceTable.ServiceTablePath;
import com.onyxdb.idm.generated.jooq.tables.records.AccountTableRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccountTable extends TableImpl<AccountTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.account_table</code>
     */
    public static final AccountTable ACCOUNT_TABLE = new AccountTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountTableRecord> getRecordType() {
        return AccountTableRecord.class;
    }

    /**
     * The column <code>public.account_table.id</code>.
     */
    public final TableField<AccountTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.account_table.username</code>.
     */
    public final TableField<AccountTableRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.account_table.password</code>.
     */
    public final TableField<AccountTableRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.account_table.email</code>.
     */
    public final TableField<AccountTableRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.account_table.first_name</code>.
     */
    public final TableField<AccountTableRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.account_table.last_name</code>.
     */
    public final TableField<AccountTableRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.account_table.created_at</code>.
     */
    public final TableField<AccountTableRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.account_table.updated_at</code>.
     */
    public final TableField<AccountTableRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private AccountTable(Name alias, Table<AccountTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AccountTable(Name alias, Table<AccountTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.account_table</code> table reference
     */
    public AccountTable(String alias) {
        this(DSL.name(alias), ACCOUNT_TABLE);
    }

    /**
     * Create an aliased <code>public.account_table</code> table reference
     */
    public AccountTable(Name alias) {
        this(alias, ACCOUNT_TABLE);
    }

    /**
     * Create a <code>public.account_table</code> table reference
     */
    public AccountTable() {
        this(DSL.name("account_table"), null);
    }

    public <O extends Record> AccountTable(Table<O> path, ForeignKey<O, AccountTableRecord> childPath, InverseForeignKey<O, AccountTableRecord> parentPath) {
        super(path, childPath, parentPath, ACCOUNT_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AccountTablePath extends AccountTable implements Path<AccountTableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AccountTablePath(Table<O> path, ForeignKey<O, AccountTableRecord> childPath, InverseForeignKey<O, AccountTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AccountTablePath(Name alias, Table<AccountTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AccountTablePath as(String alias) {
            return new AccountTablePath(DSL.name(alias), this);
        }

        @Override
        public AccountTablePath as(Name alias) {
            return new AccountTablePath(alias, this);
        }

        @Override
        public AccountTablePath as(Table<?> alias) {
            return new AccountTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountTableRecord> getPrimaryKey() {
        return Keys.ACCOUNT_TABLE_PKEY;
    }

    @Override
    public List<UniqueKey<AccountTableRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ACCOUNT_TABLE_EMAIL_KEY, Keys.ACCOUNT_TABLE_USERNAME_KEY);
    }

    private transient AccountBusinessRoleTablePath _accountBusinessRoleTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.account_business_role_table</code> table
     */
    public AccountBusinessRoleTablePath accountBusinessRoleTable() {
        if (_accountBusinessRoleTable == null)
            _accountBusinessRoleTable = new AccountBusinessRoleTablePath(this, null, Keys.ACCOUNT_BUSINESS_ROLE_TABLE__ACCOUNT_BUSINESS_ROLE_TABLE_ACCOUNT_ID_FKEY.getInverseKey());

        return _accountBusinessRoleTable;
    }

    private transient AccountOuTablePath _accountOuTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.account_ou_table</code> table
     */
    public AccountOuTablePath accountOuTable() {
        if (_accountOuTable == null)
            _accountOuTable = new AccountOuTablePath(this, null, Keys.ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_ACCOUNT_ID_FKEY.getInverseKey());

        return _accountOuTable;
    }

    private transient AccountResourceRoleTablePath _accountResourceRoleTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.account_resource_role_table</code> table
     */
    public AccountResourceRoleTablePath accountResourceRoleTable() {
        if (_accountResourceRoleTable == null)
            _accountResourceRoleTable = new AccountResourceRoleTablePath(this, null, Keys.ACCOUNT_RESOURCE_ROLE_TABLE__ACCOUNT_RESOURCE_ROLE_TABLE_ACCOUNT_ID_FKEY.getInverseKey());

        return _accountResourceRoleTable;
    }

    private transient AccountRoleTablePath _accountRoleTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.account_role_table</code> table
     */
    public AccountRoleTablePath accountRoleTable() {
        if (_accountRoleTable == null)
            _accountRoleTable = new AccountRoleTablePath(this, null, Keys.ACCOUNT_ROLE_TABLE__ACCOUNT_ROLE_TABLE_ACCOUNT_ID_FKEY.getInverseKey());

        return _accountRoleTable;
    }

    private transient OrganizationTablePath _organizationTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.organization_table</code> table
     */
    public OrganizationTablePath organizationTable() {
        if (_organizationTable == null)
            _organizationTable = new OrganizationTablePath(this, null, Keys.ORGANIZATION_TABLE__ORGANIZATION_TABLE_OWNER_ID_FKEY.getInverseKey());

        return _organizationTable;
    }

    private transient ProjectTablePath _projectTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_table</code> table
     */
    public ProjectTablePath projectTable() {
        if (_projectTable == null)
            _projectTable = new ProjectTablePath(this, null, Keys.PROJECT_TABLE__PROJECT_TABLE_OWNER_ID_FKEY.getInverseKey());

        return _projectTable;
    }

    private transient ServiceTablePath _serviceTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.service_table</code> table
     */
    public ServiceTablePath serviceTable() {
        if (_serviceTable == null)
            _serviceTable = new ServiceTablePath(this, null, Keys.SERVICE_TABLE__SERVICE_TABLE_OWNER_ID_FKEY.getInverseKey());

        return _serviceTable;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.business_role_table</code> table
     */
    public BusinessRoleTablePath businessRoleTable() {
        return accountBusinessRoleTable().businessRoleTable();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.organization_unit_table</code> table
     */
    public OrganizationUnitTablePath organizationUnitTable() {
        return accountOuTable().organizationUnitTable();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.role_table</code> table
     */
    public RoleTablePath roleTable() {
        return accountRoleTable().roleTable();
    }

    @Override
    public AccountTable as(String alias) {
        return new AccountTable(DSL.name(alias), this);
    }

    @Override
    public AccountTable as(Name alias) {
        return new AccountTable(alias, this);
    }

    @Override
    public AccountTable as(Table<?> alias) {
        return new AccountTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountTable rename(String name) {
        return new AccountTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountTable rename(Name name) {
        return new AccountTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountTable rename(Table<?> name) {
        return new AccountTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountTable where(Condition condition) {
        return new AccountTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
