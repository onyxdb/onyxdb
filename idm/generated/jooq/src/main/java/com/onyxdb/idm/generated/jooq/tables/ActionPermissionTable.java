/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.RoleActionPermissionTable.RoleActionPermissionTablePath;
import com.onyxdb.idm.generated.jooq.tables.RoleTable.RoleTablePath;
import com.onyxdb.idm.generated.jooq.tables.records.ActionPermissionTableRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ActionPermissionTable extends TableImpl<ActionPermissionTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.action_permission_table</code>
     */
    public static final ActionPermissionTable ACTION_PERMISSION_TABLE = new ActionPermissionTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActionPermissionTableRecord> getRecordType() {
        return ActionPermissionTableRecord.class;
    }

    /**
     * The column <code>public.action_permission_table.id</code>.
     */
    public final TableField<ActionPermissionTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.action_permission_table.action_type</code>.
     */
    public final TableField<ActionPermissionTableRecord, String> ACTION_TYPE = createField(DSL.name("action_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.action_permission_table.resource_fields</code>.
     */
    public final TableField<ActionPermissionTableRecord, String[]> RESOURCE_FIELDS = createField(DSL.name("resource_fields"), SQLDataType.VARCHAR(255).array(), this, "");

    /**
     * The column <code>public.action_permission_table.labels</code>.
     */
    public final TableField<ActionPermissionTableRecord, String[]> LABELS = createField(DSL.name("labels"), SQLDataType.VARCHAR(255).array(), this, "");

    /**
     * The column <code>public.action_permission_table.created_at</code>.
     */
    public final TableField<ActionPermissionTableRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.action_permission_table.updated_at</code>.
     */
    public final TableField<ActionPermissionTableRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private ActionPermissionTable(Name alias, Table<ActionPermissionTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ActionPermissionTable(Name alias, Table<ActionPermissionTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.action_permission_table</code> table
     * reference
     */
    public ActionPermissionTable(String alias) {
        this(DSL.name(alias), ACTION_PERMISSION_TABLE);
    }

    /**
     * Create an aliased <code>public.action_permission_table</code> table
     * reference
     */
    public ActionPermissionTable(Name alias) {
        this(alias, ACTION_PERMISSION_TABLE);
    }

    /**
     * Create a <code>public.action_permission_table</code> table reference
     */
    public ActionPermissionTable() {
        this(DSL.name("action_permission_table"), null);
    }

    public <O extends Record> ActionPermissionTable(Table<O> path, ForeignKey<O, ActionPermissionTableRecord> childPath, InverseForeignKey<O, ActionPermissionTableRecord> parentPath) {
        super(path, childPath, parentPath, ACTION_PERMISSION_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ActionPermissionTablePath extends ActionPermissionTable implements Path<ActionPermissionTableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ActionPermissionTablePath(Table<O> path, ForeignKey<O, ActionPermissionTableRecord> childPath, InverseForeignKey<O, ActionPermissionTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ActionPermissionTablePath(Name alias, Table<ActionPermissionTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ActionPermissionTablePath as(String alias) {
            return new ActionPermissionTablePath(DSL.name(alias), this);
        }

        @Override
        public ActionPermissionTablePath as(Name alias) {
            return new ActionPermissionTablePath(alias, this);
        }

        @Override
        public ActionPermissionTablePath as(Table<?> alias) {
            return new ActionPermissionTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ActionPermissionTableRecord> getPrimaryKey() {
        return Keys.ACTION_PERMISSION_TABLE_PKEY;
    }

    private transient RoleActionPermissionTablePath _roleActionPermissionTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.role_action_permission_table</code> table
     */
    public RoleActionPermissionTablePath roleActionPermissionTable() {
        if (_roleActionPermissionTable == null)
            _roleActionPermissionTable = new RoleActionPermissionTablePath(this, null, Keys.ROLE_ACTION_PERMISSION_TABLE__ROLE_ACTION_PERMISSION_TABLE_ACTION_PERMISSION_ID_FKEY.getInverseKey());

        return _roleActionPermissionTable;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.role_table</code> table
     */
    public RoleTablePath roleTable() {
        return roleActionPermissionTable().roleTable();
    }

    @Override
    public ActionPermissionTable as(String alias) {
        return new ActionPermissionTable(DSL.name(alias), this);
    }

    @Override
    public ActionPermissionTable as(Name alias) {
        return new ActionPermissionTable(alias, this);
    }

    @Override
    public ActionPermissionTable as(Table<?> alias) {
        return new ActionPermissionTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActionPermissionTable rename(String name) {
        return new ActionPermissionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActionPermissionTable rename(Name name) {
        return new ActionPermissionTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActionPermissionTable rename(Table<?> name) {
        return new ActionPermissionTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ActionPermissionTable where(Condition condition) {
        return new ActionPermissionTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ActionPermissionTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ActionPermissionTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ActionPermissionTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ActionPermissionTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ActionPermissionTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ActionPermissionTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ActionPermissionTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ActionPermissionTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ActionPermissionTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String[], String[], LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super String, ? super String[], ? super String[], ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super String, ? super String[], ? super String[], ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
