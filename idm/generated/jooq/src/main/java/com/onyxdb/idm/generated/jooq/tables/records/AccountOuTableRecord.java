/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables.records;


import com.onyxdb.idm.generated.jooq.tables.AccountOuTable;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccountOuTableRecord extends UpdatableRecordImpl<AccountOuTableRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.account_ou_table.account_id</code>.
     */
    public void setAccountId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.account_ou_table.account_id</code>.
     */
    public UUID getAccountId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.account_ou_table.ou_id</code>.
     */
    public void setOuId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.account_ou_table.ou_id</code>.
     */
    public UUID getOuId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return AccountOuTable.ACCOUNT_OU_TABLE.ACCOUNT_ID;
    }

    @Override
    public Field<UUID> field2() {
        return AccountOuTable.ACCOUNT_OU_TABLE.OU_ID;
    }

    @Override
    public UUID component1() {
        return getAccountId();
    }

    @Override
    public UUID component2() {
        return getOuId();
    }

    @Override
    public UUID value1() {
        return getAccountId();
    }

    @Override
    public UUID value2() {
        return getOuId();
    }

    @Override
    public AccountOuTableRecord value1(UUID value) {
        setAccountId(value);
        return this;
    }

    @Override
    public AccountOuTableRecord value2(UUID value) {
        setOuId(value);
        return this;
    }

    @Override
    public AccountOuTableRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountOuTableRecord
     */
    public AccountOuTableRecord() {
        super(AccountOuTable.ACCOUNT_OU_TABLE);
    }

    /**
     * Create a detached, initialised AccountOuTableRecord
     */
    public AccountOuTableRecord(UUID accountId, UUID ouId) {
        super(AccountOuTable.ACCOUNT_OU_TABLE);

        setAccountId(accountId);
        setOuId(ouId);
        resetChangedOnNotNull();
    }
}
