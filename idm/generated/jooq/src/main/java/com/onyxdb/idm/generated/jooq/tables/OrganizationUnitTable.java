/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.AccountOuTable.AccountOuTablePath;
import com.onyxdb.idm.generated.jooq.tables.AccountTable.AccountTablePath;
import com.onyxdb.idm.generated.jooq.tables.DomainComponentTable.DomainComponentTablePath;
import com.onyxdb.idm.generated.jooq.tables.OrganizationUnitTable.OrganizationUnitTablePath;
import com.onyxdb.idm.generated.jooq.tables.records.OrganizationUnitTableRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrganizationUnitTable extends TableImpl<OrganizationUnitTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.organization_unit_table</code>
     */
    public static final OrganizationUnitTable ORGANIZATION_UNIT_TABLE = new OrganizationUnitTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationUnitTableRecord> getRecordType() {
        return OrganizationUnitTableRecord.class;
    }

    /**
     * The column <code>public.organization_unit_table.id</code>.
     */
    public final TableField<OrganizationUnitTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.organization_unit_table.name</code>.
     */
    public final TableField<OrganizationUnitTableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.organization_unit_table.description</code>.
     */
    public final TableField<OrganizationUnitTableRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.organization_unit_table.domain_component_id</code>.
     */
    public final TableField<OrganizationUnitTableRecord, UUID> DOMAIN_COMPONENT_ID = createField(DSL.name("domain_component_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.organization_unit_table.parent_id</code>.
     */
    public final TableField<OrganizationUnitTableRecord, UUID> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.organization_unit_table.created_at</code>.
     */
    public final TableField<OrganizationUnitTableRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.organization_unit_table.updated_at</code>.
     */
    public final TableField<OrganizationUnitTableRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private OrganizationUnitTable(Name alias, Table<OrganizationUnitTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrganizationUnitTable(Name alias, Table<OrganizationUnitTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.organization_unit_table</code> table
     * reference
     */
    public OrganizationUnitTable(String alias) {
        this(DSL.name(alias), ORGANIZATION_UNIT_TABLE);
    }

    /**
     * Create an aliased <code>public.organization_unit_table</code> table
     * reference
     */
    public OrganizationUnitTable(Name alias) {
        this(alias, ORGANIZATION_UNIT_TABLE);
    }

    /**
     * Create a <code>public.organization_unit_table</code> table reference
     */
    public OrganizationUnitTable() {
        this(DSL.name("organization_unit_table"), null);
    }

    public <O extends Record> OrganizationUnitTable(Table<O> path, ForeignKey<O, OrganizationUnitTableRecord> childPath, InverseForeignKey<O, OrganizationUnitTableRecord> parentPath) {
        super(path, childPath, parentPath, ORGANIZATION_UNIT_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrganizationUnitTablePath extends OrganizationUnitTable implements Path<OrganizationUnitTableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrganizationUnitTablePath(Table<O> path, ForeignKey<O, OrganizationUnitTableRecord> childPath, InverseForeignKey<O, OrganizationUnitTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrganizationUnitTablePath(Name alias, Table<OrganizationUnitTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrganizationUnitTablePath as(String alias) {
            return new OrganizationUnitTablePath(DSL.name(alias), this);
        }

        @Override
        public OrganizationUnitTablePath as(Name alias) {
            return new OrganizationUnitTablePath(alias, this);
        }

        @Override
        public OrganizationUnitTablePath as(Table<?> alias) {
            return new OrganizationUnitTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrganizationUnitTableRecord> getPrimaryKey() {
        return Keys.ORGANIZATION_UNIT_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<OrganizationUnitTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORGANIZATION_UNIT_TABLE__ORGANIZATION_UNIT_TABLE_DOMAIN_COMPONENT_ID_FKEY, Keys.ORGANIZATION_UNIT_TABLE__ORGANIZATION_UNIT_TABLE_PARENT_ID_FKEY);
    }

    private transient DomainComponentTablePath _domainComponentTable;

    /**
     * Get the implicit join path to the
     * <code>public.domain_component_table</code> table.
     */
    public DomainComponentTablePath domainComponentTable() {
        if (_domainComponentTable == null)
            _domainComponentTable = new DomainComponentTablePath(this, Keys.ORGANIZATION_UNIT_TABLE__ORGANIZATION_UNIT_TABLE_DOMAIN_COMPONENT_ID_FKEY, null);

        return _domainComponentTable;
    }

    private transient OrganizationUnitTablePath _organizationUnitTable;

    /**
     * Get the implicit join path to the
     * <code>public.organization_unit_table</code> table.
     */
    public OrganizationUnitTablePath organizationUnitTable() {
        if (_organizationUnitTable == null)
            _organizationUnitTable = new OrganizationUnitTablePath(this, Keys.ORGANIZATION_UNIT_TABLE__ORGANIZATION_UNIT_TABLE_PARENT_ID_FKEY, null);

        return _organizationUnitTable;
    }

    private transient AccountOuTablePath _accountOuTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.account_ou_table</code> table
     */
    public AccountOuTablePath accountOuTable() {
        if (_accountOuTable == null)
            _accountOuTable = new AccountOuTablePath(this, null, Keys.ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_OU_ID_FKEY.getInverseKey());

        return _accountOuTable;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.account_table</code> table
     */
    public AccountTablePath accountTable() {
        return accountOuTable().accountTable();
    }

    @Override
    public OrganizationUnitTable as(String alias) {
        return new OrganizationUnitTable(DSL.name(alias), this);
    }

    @Override
    public OrganizationUnitTable as(Name alias) {
        return new OrganizationUnitTable(alias, this);
    }

    @Override
    public OrganizationUnitTable as(Table<?> alias) {
        return new OrganizationUnitTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationUnitTable rename(String name) {
        return new OrganizationUnitTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationUnitTable rename(Name name) {
        return new OrganizationUnitTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationUnitTable rename(Table<?> name) {
        return new OrganizationUnitTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnitTable where(Condition condition) {
        return new OrganizationUnitTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnitTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnitTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnitTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationUnitTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationUnitTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationUnitTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationUnitTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnitTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnitTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, String, UUID, UUID, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super String, ? super String, ? super UUID, ? super UUID, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super String, ? super String, ? super UUID, ? super UUID, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
