/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.AccountTable.AccountTablePath;
import com.onyxdb.idm.generated.jooq.tables.OrganizationUnitTable.OrganizationUnitTablePath;
import com.onyxdb.idm.generated.jooq.tables.records.AccountOuTableRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccountOuTable extends TableImpl<AccountOuTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.account_ou_table</code>
     */
    public static final AccountOuTable ACCOUNT_OU_TABLE = new AccountOuTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountOuTableRecord> getRecordType() {
        return AccountOuTableRecord.class;
    }

    /**
     * The column <code>public.account_ou_table.account_id</code>.
     */
    public final TableField<AccountOuTableRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.account_ou_table.ou_id</code>.
     */
    public final TableField<AccountOuTableRecord, UUID> OU_ID = createField(DSL.name("ou_id"), SQLDataType.UUID.nullable(false), this, "");

    private AccountOuTable(Name alias, Table<AccountOuTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AccountOuTable(Name alias, Table<AccountOuTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.account_ou_table</code> table reference
     */
    public AccountOuTable(String alias) {
        this(DSL.name(alias), ACCOUNT_OU_TABLE);
    }

    /**
     * Create an aliased <code>public.account_ou_table</code> table reference
     */
    public AccountOuTable(Name alias) {
        this(alias, ACCOUNT_OU_TABLE);
    }

    /**
     * Create a <code>public.account_ou_table</code> table reference
     */
    public AccountOuTable() {
        this(DSL.name("account_ou_table"), null);
    }

    public <O extends Record> AccountOuTable(Table<O> path, ForeignKey<O, AccountOuTableRecord> childPath, InverseForeignKey<O, AccountOuTableRecord> parentPath) {
        super(path, childPath, parentPath, ACCOUNT_OU_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AccountOuTablePath extends AccountOuTable implements Path<AccountOuTableRecord> {
        public <O extends Record> AccountOuTablePath(Table<O> path, ForeignKey<O, AccountOuTableRecord> childPath, InverseForeignKey<O, AccountOuTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AccountOuTablePath(Name alias, Table<AccountOuTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AccountOuTablePath as(String alias) {
            return new AccountOuTablePath(DSL.name(alias), this);
        }

        @Override
        public AccountOuTablePath as(Name alias) {
            return new AccountOuTablePath(alias, this);
        }

        @Override
        public AccountOuTablePath as(Table<?> alias) {
            return new AccountOuTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountOuTableRecord> getPrimaryKey() {
        return Keys.ACCOUNT_OU_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<AccountOuTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_ACCOUNT_ID_FKEY, Keys.ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_OU_ID_FKEY);
    }

    private transient AccountTablePath _accountTable;

    /**
     * Get the implicit join path to the <code>public.account_table</code>
     * table.
     */
    public AccountTablePath accountTable() {
        if (_accountTable == null)
            _accountTable = new AccountTablePath(this, Keys.ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_ACCOUNT_ID_FKEY, null);

        return _accountTable;
    }

    private transient OrganizationUnitTablePath _organizationUnitTable;

    /**
     * Get the implicit join path to the
     * <code>public.organization_unit_table</code> table.
     */
    public OrganizationUnitTablePath organizationUnitTable() {
        if (_organizationUnitTable == null)
            _organizationUnitTable = new OrganizationUnitTablePath(this, Keys.ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_OU_ID_FKEY, null);

        return _organizationUnitTable;
    }

    @Override
    public AccountOuTable as(String alias) {
        return new AccountOuTable(DSL.name(alias), this);
    }

    @Override
    public AccountOuTable as(Name alias) {
        return new AccountOuTable(alias, this);
    }

    @Override
    public AccountOuTable as(Table<?> alias) {
        return new AccountOuTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountOuTable rename(String name) {
        return new AccountOuTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountOuTable rename(Name name) {
        return new AccountOuTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountOuTable rename(Table<?> name) {
        return new AccountOuTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountOuTable where(Condition condition) {
        return new AccountOuTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountOuTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountOuTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountOuTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountOuTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountOuTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountOuTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountOuTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountOuTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountOuTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
