/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.records.AccountOuTableRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountOuTable extends TableImpl<AccountOuTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.account_ou_table</code>
     */
    public static final AccountOuTable ACCOUNT_OU_TABLE = new AccountOuTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountOuTableRecord> getRecordType() {
        return AccountOuTableRecord.class;
    }

    /**
     * The column <code>public.account_ou_table.account_id</code>.
     */
    public final TableField<AccountOuTableRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.account_ou_table.ou_id</code>.
     */
    public final TableField<AccountOuTableRecord, UUID> OU_ID = createField(DSL.name("ou_id"), SQLDataType.UUID.nullable(false), this, "");

    private AccountOuTable(Name alias, Table<AccountOuTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountOuTable(Name alias, Table<AccountOuTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.account_ou_table</code> table reference
     */
    public AccountOuTable(String alias) {
        this(DSL.name(alias), ACCOUNT_OU_TABLE);
    }

    /**
     * Create an aliased <code>public.account_ou_table</code> table reference
     */
    public AccountOuTable(Name alias) {
        this(alias, ACCOUNT_OU_TABLE);
    }

    /**
     * Create a <code>public.account_ou_table</code> table reference
     */
    public AccountOuTable() {
        this(DSL.name("account_ou_table"), null);
    }

    public <O extends Record> AccountOuTable(Table<O> child, ForeignKey<O, AccountOuTableRecord> key) {
        super(child, key, ACCOUNT_OU_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountOuTableRecord> getPrimaryKey() {
        return Keys.ACCOUNT_OU_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<AccountOuTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_ACCOUNT_ID_FKEY, Keys.ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_OU_ID_FKEY);
    }

    private transient AccountTable _accountTable;
    private transient OrganizationUnitTable _organizationUnitTable;

    /**
     * Get the implicit join path to the <code>public.account_table</code>
     * table.
     */
    public AccountTable accountTable() {
        if (_accountTable == null)
            _accountTable = new AccountTable(this, Keys.ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_ACCOUNT_ID_FKEY);

        return _accountTable;
    }

    /**
     * Get the implicit join path to the
     * <code>public.organization_unit_table</code> table.
     */
    public OrganizationUnitTable organizationUnitTable() {
        if (_organizationUnitTable == null)
            _organizationUnitTable = new OrganizationUnitTable(this, Keys.ACCOUNT_OU_TABLE__ACCOUNT_OU_TABLE_OU_ID_FKEY);

        return _organizationUnitTable;
    }

    @Override
    public AccountOuTable as(String alias) {
        return new AccountOuTable(DSL.name(alias), this);
    }

    @Override
    public AccountOuTable as(Name alias) {
        return new AccountOuTable(alias, this);
    }

    @Override
    public AccountOuTable as(Table<?> alias) {
        return new AccountOuTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountOuTable rename(String name) {
        return new AccountOuTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountOuTable rename(Name name) {
        return new AccountOuTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountOuTable rename(Table<?> name) {
        return new AccountOuTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
