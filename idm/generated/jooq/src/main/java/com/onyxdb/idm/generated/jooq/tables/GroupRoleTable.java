/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.records.GroupRoleTableRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupRoleTable extends TableImpl<GroupRoleTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.group_role_table</code>
     */
    public static final GroupRoleTable GROUP_ROLE_TABLE = new GroupRoleTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupRoleTableRecord> getRecordType() {
        return GroupRoleTableRecord.class;
    }

    /**
     * The column <code>public.group_role_table.group_id</code>.
     */
    public final TableField<GroupRoleTableRecord, UUID> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.group_role_table.role_id</code>.
     */
    public final TableField<GroupRoleTableRecord, UUID> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.group_role_table.resource_id</code>.
     */
    public final TableField<GroupRoleTableRecord, UUID> RESOURCE_ID = createField(DSL.name("resource_id"), SQLDataType.UUID.nullable(false), this, "");

    private GroupRoleTable(Name alias, Table<GroupRoleTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private GroupRoleTable(Name alias, Table<GroupRoleTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.group_role_table</code> table reference
     */
    public GroupRoleTable(String alias) {
        this(DSL.name(alias), GROUP_ROLE_TABLE);
    }

    /**
     * Create an aliased <code>public.group_role_table</code> table reference
     */
    public GroupRoleTable(Name alias) {
        this(alias, GROUP_ROLE_TABLE);
    }

    /**
     * Create a <code>public.group_role_table</code> table reference
     */
    public GroupRoleTable() {
        this(DSL.name("group_role_table"), null);
    }

    public <O extends Record> GroupRoleTable(Table<O> child, ForeignKey<O, GroupRoleTableRecord> key) {
        super(child, key, GROUP_ROLE_TABLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<GroupRoleTableRecord> getPrimaryKey() {
        return Keys.GROUP_ROLE_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<GroupRoleTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GROUP_ROLE_TABLE__GROUP_ROLE_TABLE_GROUP_ID_FKEY, Keys.GROUP_ROLE_TABLE__GROUP_ROLE_TABLE_ROLE_ID_FKEY);
    }

    private transient GroupTable _groupTable;
    private transient RoleTable _roleTable;

    /**
     * Get the implicit join path to the <code>public.group_table</code> table.
     */
    public GroupTable groupTable() {
        if (_groupTable == null)
            _groupTable = new GroupTable(this, Keys.GROUP_ROLE_TABLE__GROUP_ROLE_TABLE_GROUP_ID_FKEY);

        return _groupTable;
    }

    /**
     * Get the implicit join path to the <code>public.role_table</code> table.
     */
    public RoleTable roleTable() {
        if (_roleTable == null)
            _roleTable = new RoleTable(this, Keys.GROUP_ROLE_TABLE__GROUP_ROLE_TABLE_ROLE_ID_FKEY);

        return _roleTable;
    }

    @Override
    public GroupRoleTable as(String alias) {
        return new GroupRoleTable(DSL.name(alias), this);
    }

    @Override
    public GroupRoleTable as(Name alias) {
        return new GroupRoleTable(alias, this);
    }

    @Override
    public GroupRoleTable as(Table<?> alias) {
        return new GroupRoleTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupRoleTable rename(String name) {
        return new GroupRoleTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupRoleTable rename(Name name) {
        return new GroupRoleTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupRoleTable rename(Table<?> name) {
        return new GroupRoleTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
