/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.Account.AccountPath;
import com.onyxdb.idm.generated.jooq.tables.AccountOu.AccountOuPath;
import com.onyxdb.idm.generated.jooq.tables.DomainComponent.DomainComponentPath;
import com.onyxdb.idm.generated.jooq.tables.OrganizationUnit.OrganizationUnitPath;
import com.onyxdb.idm.generated.jooq.tables.records.OrganizationUnitRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrganizationUnit extends TableImpl<OrganizationUnitRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.organization_unit</code>
     */
    public static final OrganizationUnit ORGANIZATION_UNIT = new OrganizationUnit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationUnitRecord> getRecordType() {
        return OrganizationUnitRecord.class;
    }

    /**
     * The column <code>public.organization_unit.id</code>.
     */
    public final TableField<OrganizationUnitRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.organization_unit.name</code>.
     */
    public final TableField<OrganizationUnitRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.organization_unit.description</code>.
     */
    public final TableField<OrganizationUnitRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organization_unit.domain_component_id</code>.
     */
    public final TableField<OrganizationUnitRecord, Integer> DOMAIN_COMPONENT_ID = createField(DSL.name("domain_component_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.organization_unit.parent_id</code>.
     */
    public final TableField<OrganizationUnitRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.organization_unit.created_at</code>.
     */
    public final TableField<OrganizationUnitRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.organization_unit.updated_at</code>.
     */
    public final TableField<OrganizationUnitRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private OrganizationUnit(Name alias, Table<OrganizationUnitRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrganizationUnit(Name alias, Table<OrganizationUnitRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.organization_unit</code> table reference
     */
    public OrganizationUnit(String alias) {
        this(DSL.name(alias), ORGANIZATION_UNIT);
    }

    /**
     * Create an aliased <code>public.organization_unit</code> table reference
     */
    public OrganizationUnit(Name alias) {
        this(alias, ORGANIZATION_UNIT);
    }

    /**
     * Create a <code>public.organization_unit</code> table reference
     */
    public OrganizationUnit() {
        this(DSL.name("organization_unit"), null);
    }

    public <O extends Record> OrganizationUnit(Table<O> path, ForeignKey<O, OrganizationUnitRecord> childPath, InverseForeignKey<O, OrganizationUnitRecord> parentPath) {
        super(path, childPath, parentPath, ORGANIZATION_UNIT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrganizationUnitPath extends OrganizationUnit implements Path<OrganizationUnitRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrganizationUnitPath(Table<O> path, ForeignKey<O, OrganizationUnitRecord> childPath, InverseForeignKey<O, OrganizationUnitRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrganizationUnitPath(Name alias, Table<OrganizationUnitRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrganizationUnitPath as(String alias) {
            return new OrganizationUnitPath(DSL.name(alias), this);
        }

        @Override
        public OrganizationUnitPath as(Name alias) {
            return new OrganizationUnitPath(alias, this);
        }

        @Override
        public OrganizationUnitPath as(Table<?> alias) {
            return new OrganizationUnitPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrganizationUnitRecord, Integer> getIdentity() {
        return (Identity<OrganizationUnitRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrganizationUnitRecord> getPrimaryKey() {
        return Keys.ORGANIZATION_UNIT_PKEY;
    }

    @Override
    public List<ForeignKey<OrganizationUnitRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORGANIZATION_UNIT__ORGANIZATION_UNIT_DOMAIN_COMPONENT_ID_FKEY, Keys.ORGANIZATION_UNIT__ORGANIZATION_UNIT_PARENT_ID_FKEY);
    }

    private transient DomainComponentPath _domainComponent;

    /**
     * Get the implicit join path to the <code>public.domain_component</code>
     * table.
     */
    public DomainComponentPath domainComponent() {
        if (_domainComponent == null)
            _domainComponent = new DomainComponentPath(this, Keys.ORGANIZATION_UNIT__ORGANIZATION_UNIT_DOMAIN_COMPONENT_ID_FKEY, null);

        return _domainComponent;
    }

    private transient OrganizationUnitPath _organizationUnit;

    /**
     * Get the implicit join path to the <code>public.organization_unit</code>
     * table.
     */
    public OrganizationUnitPath organizationUnit() {
        if (_organizationUnit == null)
            _organizationUnit = new OrganizationUnitPath(this, Keys.ORGANIZATION_UNIT__ORGANIZATION_UNIT_PARENT_ID_FKEY, null);

        return _organizationUnit;
    }

    private transient AccountOuPath _accountOu;

    /**
     * Get the implicit to-many join path to the <code>public.account_ou</code>
     * table
     */
    public AccountOuPath accountOu() {
        if (_accountOu == null)
            _accountOu = new AccountOuPath(this, null, Keys.ACCOUNT_OU__ACCOUNT_OU_OU_ID_FKEY.getInverseKey());

        return _accountOu;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.account</code> table
     */
    public AccountPath account() {
        return accountOu().account();
    }

    @Override
    public OrganizationUnit as(String alias) {
        return new OrganizationUnit(DSL.name(alias), this);
    }

    @Override
    public OrganizationUnit as(Name alias) {
        return new OrganizationUnit(alias, this);
    }

    @Override
    public OrganizationUnit as(Table<?> alias) {
        return new OrganizationUnit(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationUnit rename(String name) {
        return new OrganizationUnit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationUnit rename(Name name) {
        return new OrganizationUnit(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationUnit rename(Table<?> name) {
        return new OrganizationUnit(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnit where(Condition condition) {
        return new OrganizationUnit(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnit where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnit where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnit where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationUnit where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationUnit where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationUnit where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationUnit where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnit whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationUnit whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
