/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.idm.generated.jooq.tables;


import com.onyxdb.idm.generated.jooq.Keys;
import com.onyxdb.idm.generated.jooq.Public;
import com.onyxdb.idm.generated.jooq.tables.Role.RolePath;
import com.onyxdb.idm.generated.jooq.tables.RolePermission.RolePermissionPath;
import com.onyxdb.idm.generated.jooq.tables.records.PermissionRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.function.Function;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.SelectField;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Permission extends TableImpl<PermissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.permission</code>
     */
    public static final Permission PERMISSION = new Permission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionRecord> getRecordType() {
        return PermissionRecord.class;
    }

    /**
     * The column <code>public.permission.id</code>.
     */
    public final TableField<PermissionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.permission.action_type</code>.
     */
    public final TableField<PermissionRecord, String> ACTION_TYPE = createField(DSL.name("action_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.permission.resource_type</code>.
     */
    public final TableField<PermissionRecord, String> RESOURCE_TYPE = createField(DSL.name("resource_type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.permission.resource_fields</code>.
     */
    public final TableField<PermissionRecord, String[]> RESOURCE_FIELDS = createField(DSL.name("resource_fields"), SQLDataType.VARCHAR(255).array(), this, "");

    /**
     * The column <code>public.permission.created_at</code>.
     */
    public final TableField<PermissionRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.permission.updated_at</code>.
     */
    public final TableField<PermissionRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Permission(Name alias, Table<PermissionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Permission(Name alias, Table<PermissionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.permission</code> table reference
     */
    public Permission(String alias) {
        this(DSL.name(alias), PERMISSION);
    }

    /**
     * Create an aliased <code>public.permission</code> table reference
     */
    public Permission(Name alias) {
        this(alias, PERMISSION);
    }

    /**
     * Create a <code>public.permission</code> table reference
     */
    public Permission() {
        this(DSL.name("permission"), null);
    }

    public <O extends Record> Permission(Table<O> path, ForeignKey<O, PermissionRecord> childPath, InverseForeignKey<O, PermissionRecord> parentPath) {
        super(path, childPath, parentPath, PERMISSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PermissionPath extends Permission implements Path<PermissionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PermissionPath(Table<O> path, ForeignKey<O, PermissionRecord> childPath, InverseForeignKey<O, PermissionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PermissionPath(Name alias, Table<PermissionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PermissionPath as(String alias) {
            return new PermissionPath(DSL.name(alias), this);
        }

        @Override
        public PermissionPath as(Name alias) {
            return new PermissionPath(alias, this);
        }

        @Override
        public PermissionPath as(Table<?> alias) {
            return new PermissionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PermissionRecord, Integer> getIdentity() {
        return (Identity<PermissionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PermissionRecord> getPrimaryKey() {
        return Keys.PERMISSION_PKEY;
    }

    private transient RolePermissionPath _rolePermission;

    /**
     * Get the implicit to-many join path to the
     * <code>public.role_permission</code> table
     */
    public RolePermissionPath rolePermission() {
        if (_rolePermission == null)
            _rolePermission = new RolePermissionPath(this, null, Keys.ROLE_PERMISSION__ROLE_PERMISSION_PERMISSION_ID_FKEY.getInverseKey());

        return _rolePermission;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.role</code>
     * table
     */
    public RolePath role() {
        return rolePermission().role();
    }

    @Override
    public Permission as(String alias) {
        return new Permission(DSL.name(alias), this);
    }

    @Override
    public Permission as(Name alias) {
        return new Permission(alias, this);
    }

    @Override
    public Permission as(Table<?> alias) {
        return new Permission(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Permission rename(String name) {
        return new Permission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permission rename(Name name) {
        return new Permission(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permission rename(Table<?> name) {
        return new Permission(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission where(Condition condition) {
        return new Permission(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permission where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permission where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permission where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permission where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permission whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String[], LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super String, ? super String[], ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super String, ? super String[], ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
