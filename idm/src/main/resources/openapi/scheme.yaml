openapi: 3.0.0
info:
  version: 1.0.0
  title: IDM - Role Based Access Control
servers:
  - url: http://localhost:8080
    description: Local server

paths:
  /api/v1/accounts:
    get:
      summary: Get all accounts
      operationId: getAllAccounts
      tags:
        - Accounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
    post:
      summary: Create a new account
      operationId: createAccount
      tags:
        - Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'

  /api/v1/accounts/{accountId}:
    get:
      summary: Get an account by ID
      operationId: getAccountById
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Not Found
    put:
      summary: Update an account by ID
      operationId: updateAccount
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Not Found
    delete:
      summary: Delete an account by ID
      operationId: deleteAccount
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  /api/v1/roles:
    get:
      summary: Get all roles
      operationId: getAllRoles
      tags:
        - Roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      summary: Create a new role
      operationId: createRole
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'

  /api/v1/roles/{roleId}:
    get:
      summary: Get a role by ID
      operationId: getRoleById
      tags:
        - Roles
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Not Found
    put:
      summary: Update a role by ID
      operationId: updateRole
      tags:
        - Roles
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Not Found
    delete:
      summary: Delete a role by ID
      operationId: deleteRole
      tags:
        - Roles
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  /api/v1/permissions:
    get:
      summary: Get all permissions
      operationId: getAllPermissions
      tags:
        - Permissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
    post:
      summary: Create a new permission
      operationId: createPermission
      tags:
        - Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'

  /api/v1/permissions/{permissionId}:
    get:
      summary: Get a permission by ID
      operationId: getPermissionById
      tags:
        - Permissions
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '404':
          description: Not Found
    put:
      summary: Update a permission by ID
      operationId: updatePermission
      tags:
        - Permissions
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '404':
          description: Not Found
    delete:
      summary: Delete a permission by ID
      operationId: deletePermission
      tags:
        - Permissions
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  /api/v1/business-roles:
    get:
      summary: Get all business roles
      operationId: getAllBusinessRoles
      tags:
        - Business Roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusinessRole'
    post:
      summary: Create a new business role
      operationId: createBusinessRole
      tags:
        - Business Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessRole'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessRole'

  /api/v1/business-roles/{businessRoleId}:
    get:
      summary: Get a business role by ID
      operationId: getBusinessRoleById
      tags:
        - Business Roles
      parameters:
        - name: businessRoleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessRole'
        '404':
          description: Not Found
    put:
      summary: Update a business role by ID
      operationId: updateBusinessRole
      tags:
        - Business Roles
      parameters:
        - name: businessRoleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessRole'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessRole'
        '404':
          description: Not Found
    delete:
      summary: Delete a business role by ID
      operationId: deleteBusinessRole
      tags:
        - Business Roles
      parameters:
        - name: businessRoleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  /api/v1/business-roles/{businessRoleId}/roles:
    get:
      summary: Get roles by business role ID
      operationId: getRolesByBusinessRoleId
      tags:
        - Business Roles
      parameters:
        - name: businessRoleId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '404':
          description: Not Found

  /api/v1/organization-units:
    get:
      summary: Get all organization units
      operationId: getAllOrganizationUnits
      tags:
        - Organization Units
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationUnit'
    post:
      summary: Create a new organization unit
      operationId: createOrganizationUnit
      tags:
        - Organization Units
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUnit'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUnit'

  /api/v1/organization-units/{organizationUnitId}:
    get:
      summary: Get an organization unit by ID
      operationId: getOrganizationUnitById
      tags:
        - Organization Units
      parameters:
        - name: organizationUnitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUnit'
        '404':
          description: Not Found
    put:
      summary: Update an organization unit by ID
      operationId: updateOrganizationUnit
      tags:
        - Organization Units
      parameters:
        - name: organizationUnitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUnit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUnit'
        '404':
          description: Not Found
    delete:
      summary: Delete an organization unit by ID
      operationId: deleteOrganizationUnit
      tags:
        - Organization Units
      parameters:
        - name: organizationUnitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  /api/v1/resources:
    get:
      summary: Get all resources
      operationId: getAllResources
      tags:
        - Resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
    post:
      summary: Create a new resource
      operationId: createResource
      tags:
        - Resources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'

  /api/v1/resources/{resourceId}:
    get:
      summary: Get a resource by ID
      operationId: getResourceById
      tags:
        - Resources
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '404':
          description: Not Found
    put:
      summary: Update a resource by ID
      operationId: updateResource
      tags:
        - Resources
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '404':
          description: Not Found
    delete:
      summary: Delete a resource by ID
      operationId: deleteResource
      tags:
        - Resources
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  /api/v1/projects:
    get:
      summary: Get all projects
      operationId: getAllProjects
      tags:
        - Projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      summary: Create a new project
      operationId: createProject
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /api/v1/projects/{projectId}:
    get:
      summary: Get a project by ID
      operationId: getProjectById
      tags:
        - Projects
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Not Found
    put:
      summary: Update a project by ID
      operationId: updateProject
      tags:
        - Projects
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Not Found
    delete:
      summary: Delete a project by ID
      operationId: deleteProject
      tags:
        - Projects
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  /api/v1/services:
    get:
      summary: Get all services
      operationId: getAllServices
      tags:
        - Services
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
    post:
      summary: Create a new service
      operationId: createService
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

  /api/v1/services/{serviceId}:
    get:
      summary: Get a service by ID
      operationId: getServiceById
      tags:
        - Services
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Not Found
    put:
      summary: Update a service by ID
      operationId: updateService
      tags:
        - Services
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Not Found
    delete:
      summary: Delete a service by ID
      operationId: deleteService
      tags:
        - Services
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  /api/v1/organizations:
    get:
      summary: Get all organizations
      operationId: getAllOrganizations
      tags:
        - Organizations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    post:
      summary: Create a new organization
      operationId: createOrganization
      tags:
        - Organizations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'

  /api/v1/organizations/{organizationId}:
    get:
      summary: Get an organization by ID
      operationId: getOrganizationById
      tags:
        - Organizations
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Not Found
    put:
      summary: Update an organization by ID
      operationId: updateOrganization
      tags:
        - Organizations
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Not Found
    delete:
      summary: Delete an organization by ID
      operationId: deleteOrganization
      tags:
        - Organizations
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

  /api/v1/account-resource-roles:
    get:
      summary: Get all account resource roles
      operationId: getAllAccountResourceRoles
      tags:
        - Account Resource Roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResourceRole'
    post:
      summary: Create a new account resource role
      operationId: createAccountResourceRole
      tags:
        - Account Resource Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountResourceRole'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResourceRole'
    delete:
      summary: Delete an account resource role
      operationId: deleteAccountResourceRole
      tags:
        - Account Resource Roles
      parameters:
        - name: accountId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: resourceId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: roleId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content

components:
  schemas:
    BadRequestResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    Account:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        password:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Permission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        actionType:
          type: string
        resourceType:
          type: string
        resourceFields:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BusinessRole:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrganizationUnit:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        domainComponentId:
          type: string
          format: uuid
        parentId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        ownerId:
          type: string
          format: uuid
        responsibleId:
          type: string
          format: uuid

    Resource:
      type: object
      properties:
        id:
          type: string
          format: uuid
        resourceType:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceId:
          type: string
          format: uuid
        organizationId:
          type: string
          format: uuid
        ownerId:
          type: string
          format: uuid
        responsibleId:
          type: string
          format: uuid

    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceId:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        ownerId:
          type: string
          format: uuid
        responsibleId:
          type: string
          format: uuid
        participants:
          type: array
          items:
            type: string

    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        resourceId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        ownerId:
          type: string
          format: uuid
        responsibleId:
          type: string
          format: uuid
        participants:
          type: array
          items:
            type: string

    AccountResourceRole:
      type: object
      properties:
        accountId:
          type: string
          format: uuid
        resourceId:
          type: string
          format: uuid
        roleId:
          type: string
          format: uuid