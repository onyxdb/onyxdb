<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

    <property name="charset" value="UTF-8"/>

    <module name="SuppressionFilter">
        <property name="file" value="${checkstyle.service.suppression.file}"/>
    </module>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="LineLength">
        <property name="max" value="120"/>
        <property name="ignorePattern"
                  value="^ *\* *.+$|^\s*@RequestParam\([^;]*,$|\&quot;[^\&quot;]{50,}"/>
        <property name="severity" value="ignore"/>
    </module>


    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <!-- <module name="JavadocPackage"/> --> <!-- We don't write javadoc -->

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <!--<module name="FileLength"/>-->

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="severity" value="ignore"/>
    </module>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="NewlineAtEndOfFile">
        <property name="severity" value="ignore"/>
    </module>
    <module name="Translation">
        <property name="severity" value="ignore"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Line has trailing spaces."/>
        <property name="severity" value="ignore"/>
    </module>

    <module name="SuppressWarningsFilter" />

    <module name="TreeWalker">

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!-- Yes, we don't write comments -->
        <!--
        <module name="JavadocMethod"/>
        <module name="JavadocType"/>
        <module name="JavadocVariable"/>
        <module name="JavadocStyle"/>
        -->

        <!-- Annotations -->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html -->
        <!-- <module name="MissingOverride"/> --> <!-- Cannot use because of @Override for bolts -->

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName">
            <!-- We have rule about lowerCase for classes with business-logic and upperCase for effective constants -->
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$|^[a-z][a-zA-Z0-9]*$"/>
            <property name="severity" value="ignore"/>
        </module>
        <module name="LocalFinalVariableName">
            <!-- local final variable can be a constant -->
            <property name="format" value="^[a-z][a-zA-Z0-9]*$|^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
            <property name="severity" value="ignore"/>
        </module>
        <module name="LocalVariableName">
            <property name="severity" value="ignore"/>
        </module>
        <module name="MemberName">
            <property name="severity" value="ignore"/>
        </module>
        <module name="PackageName">
            <property name="severity" value="ignore"/>
        </module>
        <module name="ParameterName">
            <property name="severity" value="ignore"/>
        </module>
        <module name="StaticVariableName">
            <property name="severity" value="ignore"/>
        </module>
        <module name="TypeName"/>


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport">
            <property name="excludes" value="org.mockito.Mockito,org.junit.Assert,org.junit.jupiter.api.Assertions"/>
        </module>
        <module name="IllegalImport">
        </module>
        <module name="RedundantImport">
        </module>
        <module name="UnusedImports">
            <property name="processJavadoc" value="true"/>
        </module>

        <!--<module name="ImportOrder"/>--> <!-- XXX Turn on somewhen -->


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="MethodLength">
            <property name="max" value="150"/>
            <property name="countEmpty" value="false"/>
        </module>
        <module name="ParameterNumber">
            <property name="max" value="30"/>
            <property name="severity" value="ignore"/>
        </module>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForInitializerPad">
            <property name="severity" value="ignore"/>
        </module>
        <module name="EmptyForIteratorPad">
            <property name="option" value="space"/>
            <property name="severity" value="ignore"/>
        </module>
        <module name="GenericWhitespace">
            <!-- This rule works bad for nested generics declarations, maybe we need to suppress it. -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="MethodParamPad">
            <property name="severity" value="ignore"/>
        </module>
        <module name="NoWhitespaceAfter">
            <property name="severity" value="ignore"/>
            <property name="tokens"
                      value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, ARRAY_DECLARATOR, UNARY_PLUS"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="DOT"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="severity" value="ignore"/>
        </module>
        <module name="OperatorWrap">
            <property name="tokens" value="
                QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, MINUS, STAR,
                MOD, SR, BSR, GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND,
                TYPE_EXTENSION_AND, LITERAL_INSTANCEOF"/>
        </module>
        <module name="ParenPad">
            <property name="severity" value="ignore"/>
        </module>
        <module name="TypecastParenPad">
            <property name="severity" value="ignore"/>
        </module>
        <module name="WhitespaceAfter">
            <property name="severity" value="ignore"/>
        </module>
        <module name="WhitespaceAround">
            <!--
                Removed RCURLY because can be new Function() {}.asComparator()
                Removed LCURLY because can be class Lock {}
            -->
            <property name="tokens" value="
                    ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON,
                    DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO,
                    LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED,
                    LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL,
                    PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN,
                    TYPE_EXTENSION_AND"/>
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="severity" value="ignore"/>
        </module>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder">
            <property name="severity" value="ignore"/>
        </module>
        <module name="RedundantModifier">
            <property name="severity" value="ignore"/>
        </module>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <!-- <module name="AvoidNestedBlocks"/> --> <!-- Sometimes nested blocks are useful -->
        <module name="EmptyBlock">
            <!-- At least comment should be in empty block -->
            <property name="option" value="text"/>
            <property name="severity" value="ignore"/>
        </module>
        <module name="LeftCurly">
            <property name="option" value="nlow"/>
        </module>
        <module name="NeedBraces">
            <!-- Removed LITERAL_IF, because we accept short if -->
            <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE"/>
        </module>
        <module name="RightCurly">
            <property name="option" value="same"/>
            <property name="tokens" value="LITERAL_IF, METHOD_DEF"/>
        </module>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!-- <module name="AvoidInlineConditionals"/> --> <!-- OMG! It forbid ternary operator! -->
        <module name="EmptyStatement">
            <property name="severity" value="ignore"/>
        </module>
        <module name="EqualsHashCode">
            <property name="severity" value="ignore"/>
        </module>
        <!-- <module name="HiddenField"/> --> <!-- Failed to setup it for bolts and factory methods -->
        <module name="IllegalInstantiation"/>
        <!-- <module name="InnerAssignment"/> --> <!-- We do use inner assignments -->
        <!-- <module name="MagicNumber"/> --> <!-- Cannot use since we use settings directly in code -->
        <module name="MissingSwitchDefault">
            <property name="severity" value="ignore"/>
        </module>
        <module name="SimplifyBooleanExpression">
            <property name="severity" value="ignore"/>
        </module>
        <module name="SimplifyBooleanReturn">
            <property name="severity" value="ignore"/>
        </module>
        <module name="DefaultComesLast">
            <property name="severity" value="ignore"/>
        </module>
        <module name="FallThrough">
            <property name="severity" value="ignore"/>
        </module>
        <!--<module name="MultipleStringLiterals"/>--> <!-- Seems useful, but don't work with Daos -->
        <module name="MultipleVariableDeclarations">
            <property name="severity" value="ignore"/>
        </module>
        <module name="CovariantEquals"/>
        <module name="StringLiteralEquality"/>
        <module name="OneStatementPerLine">
            <property name="severity" value="ignore"/>
        </module>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!-- <module name="DesignForExtension"/> --> <!-- Very strange rule: to mark all methods with final -->
        <!-- <module name="FinalClass"/> --> <!-- We do not like final classes -->
        <!-- <module name="HideUtilityClassConstructor"/> --> <!-- Colleagues don't want to write private ctors -->
        <!-- <module name="InterfaceIsType"/> --> <!-- Sometimes we use interface as constant container, don't want fascism here -->
        <!-- <module name="VisibilityModifier"/> --> <!-- Cannot use since we write public final fields for pojos -->
        <module name="MutableException">
            <property name="severity" value="ignore"/>
        </module>
        <!--<module name="InnerTypeLast"/>--> <!-- XXX Maybe turn on someday -->


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle">
            <property name="severity" value="ignore"/>
        </module>
        <!-- <module name="FinalParameters"/> --> <!-- We use final only when it's really necessary, not for all method parameters -->
        <!-- NOT USED BY ANYONE UNFORTUNATELY -->
        <!--<module name="TodoComment">-->
        <!--<property name="format" value="TODO"/>-->
        <!--<property name="severity" value="info"/>-->
        <!--</module>-->
        <!--<module name="TodoComment">-->
        <!--<property name="format" value="XXX|FIXME"/>-->
        <!--<property name="severity" value="warning"/>-->
        <!--</module>-->
        <module name="UpperEll">
            <property name="severity" value="ignore"/>
        </module>
        <module name="OuterTypeFilename"/>

        <!--<module name="RegexpSinglelineJava">
            <property name="message" value="Logger field should be written in lower case: logger."/>
            <property name="format" value="Logger ((?!logger).)* = LoggerFactory"/>
            <property name="ignoreComments" value="true"/>
        </module>-->

        <module name="RegexpSinglelineJava">
            <property name="message" value="Message in logger should start with capital letter"/>
            <property name="format" value="logger\.(trace|debug|info|warn|error)\(\&quot;[a-z]"/>
            <property name="ignoreComments" value="true"/>
            <property name="severity" value="ignore"/>
        </module>

        <module name="RegexpSinglelineJava">
            <property name="message" value="Message in logger should start with capital letter"/>
            <property name="format" value="logger\.log\([^,]+,\s*\&quot;[a-z]"/>
            <property name="ignoreComments" value="true"/>
            <property name="severity" value="ignore"/>
        </module>

        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF,
            INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, CTOR_DEF, VARIABLE_DEF,
            RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>
        <module name="SuppressWarningsHolder" />
    </module>

</module>
