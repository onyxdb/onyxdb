/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.mdb.generated.jooq.tables;


import com.onyxdb.mdb.generated.jooq.Keys;
import com.onyxdb.mdb.generated.jooq.Public;
import com.onyxdb.mdb.generated.jooq.tables.ClusterTasks.ClusterTasksPath;
import com.onyxdb.mdb.generated.jooq.tables.records.ClusterTasksToBlockerTasksRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ClusterTasksToBlockerTasks extends TableImpl<ClusterTasksToBlockerTasksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.cluster_tasks_to_blocker_tasks</code>
     */
    public static final ClusterTasksToBlockerTasks CLUSTER_TASKS_TO_BLOCKER_TASKS = new ClusterTasksToBlockerTasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClusterTasksToBlockerTasksRecord> getRecordType() {
        return ClusterTasksToBlockerTasksRecord.class;
    }

    /**
     * The column <code>public.cluster_tasks_to_blocker_tasks.task_id</code>.
     */
    public final TableField<ClusterTasksToBlockerTasksRecord, UUID> TASK_ID = createField(DSL.name("task_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.cluster_tasks_to_blocker_tasks.blocker_task_id</code>.
     */
    public final TableField<ClusterTasksToBlockerTasksRecord, UUID> BLOCKER_TASK_ID = createField(DSL.name("blocker_task_id"), SQLDataType.UUID.nullable(false), this, "");

    private ClusterTasksToBlockerTasks(Name alias, Table<ClusterTasksToBlockerTasksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ClusterTasksToBlockerTasks(Name alias, Table<ClusterTasksToBlockerTasksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.cluster_tasks_to_blocker_tasks</code>
     * table reference
     */
    public ClusterTasksToBlockerTasks(String alias) {
        this(DSL.name(alias), CLUSTER_TASKS_TO_BLOCKER_TASKS);
    }

    /**
     * Create an aliased <code>public.cluster_tasks_to_blocker_tasks</code>
     * table reference
     */
    public ClusterTasksToBlockerTasks(Name alias) {
        this(alias, CLUSTER_TASKS_TO_BLOCKER_TASKS);
    }

    /**
     * Create a <code>public.cluster_tasks_to_blocker_tasks</code> table
     * reference
     */
    public ClusterTasksToBlockerTasks() {
        this(DSL.name("cluster_tasks_to_blocker_tasks"), null);
    }

    public <O extends Record> ClusterTasksToBlockerTasks(Table<O> path, ForeignKey<O, ClusterTasksToBlockerTasksRecord> childPath, InverseForeignKey<O, ClusterTasksToBlockerTasksRecord> parentPath) {
        super(path, childPath, parentPath, CLUSTER_TASKS_TO_BLOCKER_TASKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ClusterTasksToBlockerTasksPath extends ClusterTasksToBlockerTasks implements Path<ClusterTasksToBlockerTasksRecord> {
        public <O extends Record> ClusterTasksToBlockerTasksPath(Table<O> path, ForeignKey<O, ClusterTasksToBlockerTasksRecord> childPath, InverseForeignKey<O, ClusterTasksToBlockerTasksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ClusterTasksToBlockerTasksPath(Name alias, Table<ClusterTasksToBlockerTasksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ClusterTasksToBlockerTasksPath as(String alias) {
            return new ClusterTasksToBlockerTasksPath(DSL.name(alias), this);
        }

        @Override
        public ClusterTasksToBlockerTasksPath as(Name alias) {
            return new ClusterTasksToBlockerTasksPath(alias, this);
        }

        @Override
        public ClusterTasksToBlockerTasksPath as(Table<?> alias) {
            return new ClusterTasksToBlockerTasksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClusterTasksToBlockerTasksRecord> getPrimaryKey() {
        return Keys.CLUSTER_TASKS_TO_BLOCKER_TASKS_PKEY;
    }

    @Override
    public List<ForeignKey<ClusterTasksToBlockerTasksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLUSTER_TASKS_TO_BLOCKER_TASKS__CLUSTER_TASKS_TO_BLOCKER_TASKS_TASK_ID_FKEY, Keys.CLUSTER_TASKS_TO_BLOCKER_TASKS__CLUSTER_TASKS_TO_BLOCKER_TASKS_BLOCKER_TASK_ID_FKEY);
    }

    private transient ClusterTasksPath _clusterTasksToBlockerTasksTaskIdFkey;

    /**
     * Get the implicit join path to the <code>public.cluster_tasks</code>
     * table, via the <code>cluster_tasks_to_blocker_tasks_task_id_fkey</code>
     * key.
     */
    public ClusterTasksPath clusterTasksToBlockerTasksTaskIdFkey() {
        if (_clusterTasksToBlockerTasksTaskIdFkey == null)
            _clusterTasksToBlockerTasksTaskIdFkey = new ClusterTasksPath(this, Keys.CLUSTER_TASKS_TO_BLOCKER_TASKS__CLUSTER_TASKS_TO_BLOCKER_TASKS_TASK_ID_FKEY, null);

        return _clusterTasksToBlockerTasksTaskIdFkey;
    }

    private transient ClusterTasksPath _clusterTasksToBlockerTasksBlockerTaskIdFkey;

    /**
     * Get the implicit join path to the <code>public.cluster_tasks</code>
     * table, via the
     * <code>cluster_tasks_to_blocker_tasks_blocker_task_id_fkey</code> key.
     */
    public ClusterTasksPath clusterTasksToBlockerTasksBlockerTaskIdFkey() {
        if (_clusterTasksToBlockerTasksBlockerTaskIdFkey == null)
            _clusterTasksToBlockerTasksBlockerTaskIdFkey = new ClusterTasksPath(this, Keys.CLUSTER_TASKS_TO_BLOCKER_TASKS__CLUSTER_TASKS_TO_BLOCKER_TASKS_BLOCKER_TASK_ID_FKEY, null);

        return _clusterTasksToBlockerTasksBlockerTaskIdFkey;
    }

    @Override
    public ClusterTasksToBlockerTasks as(String alias) {
        return new ClusterTasksToBlockerTasks(DSL.name(alias), this);
    }

    @Override
    public ClusterTasksToBlockerTasks as(Name alias) {
        return new ClusterTasksToBlockerTasks(alias, this);
    }

    @Override
    public ClusterTasksToBlockerTasks as(Table<?> alias) {
        return new ClusterTasksToBlockerTasks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterTasksToBlockerTasks rename(String name) {
        return new ClusterTasksToBlockerTasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterTasksToBlockerTasks rename(Name name) {
        return new ClusterTasksToBlockerTasks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterTasksToBlockerTasks rename(Table<?> name) {
        return new ClusterTasksToBlockerTasks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasksToBlockerTasks where(Condition condition) {
        return new ClusterTasksToBlockerTasks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasksToBlockerTasks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasksToBlockerTasks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasksToBlockerTasks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ClusterTasksToBlockerTasks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ClusterTasksToBlockerTasks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ClusterTasksToBlockerTasks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ClusterTasksToBlockerTasks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasksToBlockerTasks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasksToBlockerTasks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
