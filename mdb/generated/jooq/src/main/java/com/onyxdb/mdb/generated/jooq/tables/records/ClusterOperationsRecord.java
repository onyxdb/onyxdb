/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.mdb.generated.jooq.tables.records;


import com.onyxdb.mdb.generated.jooq.enums.ClusterOperationStatus;
import com.onyxdb.mdb.generated.jooq.enums.ClusterOperationType;
import com.onyxdb.mdb.generated.jooq.tables.ClusterOperations;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ClusterOperationsRecord extends UpdatableRecordImpl<ClusterOperationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.cluster_operations.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.cluster_operations.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.cluster_operations.cluster_id</code>.
     */
    public void setClusterId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.cluster_operations.cluster_id</code>.
     */
    public UUID getClusterId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.cluster_operations.type</code>.
     */
    public void setType(ClusterOperationType value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.cluster_operations.type</code>.
     */
    public ClusterOperationType getType() {
        return (ClusterOperationType) get(2);
    }

    /**
     * Setter for <code>public.cluster_operations.status</code>.
     */
    public void setStatus(ClusterOperationStatus value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.cluster_operations.status</code>.
     */
    public ClusterOperationStatus getStatus() {
        return (ClusterOperationStatus) get(3);
    }

    /**
     * Setter for <code>public.cluster_operations.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.cluster_operations.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.cluster_operations.created_by</code>.
     */
    public void setCreatedBy(UUID value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.cluster_operations.created_by</code>.
     */
    public UUID getCreatedBy() {
        return (UUID) get(5);
    }

    /**
     * Setter for <code>public.cluster_operations.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.cluster_operations.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClusterOperationsRecord
     */
    public ClusterOperationsRecord() {
        super(ClusterOperations.CLUSTER_OPERATIONS);
    }

    /**
     * Create a detached, initialised ClusterOperationsRecord
     */
    public ClusterOperationsRecord(UUID id, UUID clusterId, ClusterOperationType type, ClusterOperationStatus status, LocalDateTime createdAt, UUID createdBy, LocalDateTime updatedAt) {
        super(ClusterOperations.CLUSTER_OPERATIONS);

        setId(id);
        setClusterId(clusterId);
        setType(type);
        setStatus(status);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
