/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.mdb.generated.jooq.tables;


import com.onyxdb.mdb.generated.jooq.Keys;
import com.onyxdb.mdb.generated.jooq.Public;
import com.onyxdb.mdb.generated.jooq.enums.ClusterType;
import com.onyxdb.mdb.generated.jooq.tables.ClusterOperations.ClusterOperationsPath;
import com.onyxdb.mdb.generated.jooq.tables.ClusterTasks.ClusterTasksPath;
import com.onyxdb.mdb.generated.jooq.tables.records.ClustersRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Clusters extends TableImpl<ClustersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.clusters</code>
     */
    public static final Clusters CLUSTERS = new Clusters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClustersRecord> getRecordType() {
        return ClustersRecord.class;
    }

    /**
     * The column <code>public.clusters.id</code>.
     */
    public final TableField<ClustersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.clusters.name</code>.
     */
    public final TableField<ClustersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.clusters.description</code>.
     */
    public final TableField<ClustersRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.clusters.type</code>.
     */
    public final TableField<ClustersRecord, ClusterType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ClusterType.class), this, "");

    private Clusters(Name alias, Table<ClustersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Clusters(Name alias, Table<ClustersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.clusters</code> table reference
     */
    public Clusters(String alias) {
        this(DSL.name(alias), CLUSTERS);
    }

    /**
     * Create an aliased <code>public.clusters</code> table reference
     */
    public Clusters(Name alias) {
        this(alias, CLUSTERS);
    }

    /**
     * Create a <code>public.clusters</code> table reference
     */
    public Clusters() {
        this(DSL.name("clusters"), null);
    }

    public <O extends Record> Clusters(Table<O> path, ForeignKey<O, ClustersRecord> childPath, InverseForeignKey<O, ClustersRecord> parentPath) {
        super(path, childPath, parentPath, CLUSTERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ClustersPath extends Clusters implements Path<ClustersRecord> {
        public <O extends Record> ClustersPath(Table<O> path, ForeignKey<O, ClustersRecord> childPath, InverseForeignKey<O, ClustersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ClustersPath(Name alias, Table<ClustersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ClustersPath as(String alias) {
            return new ClustersPath(DSL.name(alias), this);
        }

        @Override
        public ClustersPath as(Name alias) {
            return new ClustersPath(alias, this);
        }

        @Override
        public ClustersPath as(Table<?> alias) {
            return new ClustersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClustersRecord> getPrimaryKey() {
        return Keys.CLUSTERS_PKEY;
    }

    private transient ClusterOperationsPath _clusterOperations;

    /**
     * Get the implicit to-many join path to the
     * <code>public.cluster_operations</code> table
     */
    public ClusterOperationsPath clusterOperations() {
        if (_clusterOperations == null)
            _clusterOperations = new ClusterOperationsPath(this, null, Keys.CLUSTER_OPERATIONS__CLUSTER_OPERATIONS_CLUSTER_ID_FKEY.getInverseKey());

        return _clusterOperations;
    }

    private transient ClusterTasksPath _clusterTasks;

    /**
     * Get the implicit to-many join path to the
     * <code>public.cluster_tasks</code> table
     */
    public ClusterTasksPath clusterTasks() {
        if (_clusterTasks == null)
            _clusterTasks = new ClusterTasksPath(this, null, Keys.CLUSTER_TASKS__CLUSTER_TASKS_CLUSTER_ID_FKEY.getInverseKey());

        return _clusterTasks;
    }

    @Override
    public Clusters as(String alias) {
        return new Clusters(DSL.name(alias), this);
    }

    @Override
    public Clusters as(Name alias) {
        return new Clusters(alias, this);
    }

    @Override
    public Clusters as(Table<?> alias) {
        return new Clusters(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Clusters rename(String name) {
        return new Clusters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clusters rename(Name name) {
        return new Clusters(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clusters rename(Table<?> name) {
        return new Clusters(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clusters where(Condition condition) {
        return new Clusters(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clusters where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clusters where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clusters where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clusters where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clusters where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clusters where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Clusters where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clusters whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Clusters whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
