/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.mdb.generated.jooq.tables;


import com.onyxdb.mdb.generated.jooq.Keys;
import com.onyxdb.mdb.generated.jooq.Public;
import com.onyxdb.mdb.generated.jooq.enums.ClusterType;
import com.onyxdb.mdb.generated.jooq.tables.records.ClustersRecord;

import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Clusters extends TableImpl<ClustersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.clusters</code>
     */
    public static final Clusters CLUSTERS = new Clusters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClustersRecord> getRecordType() {
        return ClustersRecord.class;
    }

    /**
     * The column <code>public.clusters.id</code>.
     */
    public final TableField<ClustersRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.clusters.name</code>.
     */
    public final TableField<ClustersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.clusters.description</code>.
     */
    public final TableField<ClustersRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.clusters.type</code>.
     */
    public final TableField<ClustersRecord, ClusterType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.onyxdb.mdb.generated.jooq.enums.ClusterType.class), this, "");

    private Clusters(Name alias, Table<ClustersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Clusters(Name alias, Table<ClustersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.clusters</code> table reference
     */
    public Clusters(String alias) {
        this(DSL.name(alias), CLUSTERS);
    }

    /**
     * Create an aliased <code>public.clusters</code> table reference
     */
    public Clusters(Name alias) {
        this(alias, CLUSTERS);
    }

    /**
     * Create a <code>public.clusters</code> table reference
     */
    public Clusters() {
        this(DSL.name("clusters"), null);
    }

    public <O extends Record> Clusters(Table<O> child, ForeignKey<O, ClustersRecord> key) {
        super(child, key, CLUSTERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClustersRecord> getPrimaryKey() {
        return Keys.CLUSTERS_PKEY;
    }

    @Override
    public Clusters as(String alias) {
        return new Clusters(DSL.name(alias), this);
    }

    @Override
    public Clusters as(Name alias) {
        return new Clusters(alias, this);
    }

    @Override
    public Clusters as(Table<?> alias) {
        return new Clusters(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Clusters rename(String name) {
        return new Clusters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clusters rename(Name name) {
        return new Clusters(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clusters rename(Table<?> name) {
        return new Clusters(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, ClusterType> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super String, ? super ClusterType, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super String, ? super ClusterType, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
