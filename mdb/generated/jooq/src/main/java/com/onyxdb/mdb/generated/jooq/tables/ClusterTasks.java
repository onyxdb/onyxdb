/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.mdb.generated.jooq.tables;


import com.onyxdb.mdb.generated.jooq.Keys;
import com.onyxdb.mdb.generated.jooq.Public;
import com.onyxdb.mdb.generated.jooq.enums.ClusterTaskStatus;
import com.onyxdb.mdb.generated.jooq.enums.ClusterTaskType;
import com.onyxdb.mdb.generated.jooq.enums.ClusterType;
import com.onyxdb.mdb.generated.jooq.tables.records.ClusterTasksRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClusterTasks extends TableImpl<ClusterTasksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cluster_tasks</code>
     */
    public static final ClusterTasks CLUSTER_TASKS = new ClusterTasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClusterTasksRecord> getRecordType() {
        return ClusterTasksRecord.class;
    }

    /**
     * The column <code>public.cluster_tasks.id</code>.
     */
    public final TableField<ClusterTasksRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.cluster_id</code>.
     */
    public final TableField<ClusterTasksRecord, UUID> CLUSTER_ID = createField(DSL.name("cluster_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.operation_id</code>.
     */
    public final TableField<ClusterTasksRecord, UUID> OPERATION_ID = createField(DSL.name("operation_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.cluster_type</code>.
     */
    public final TableField<ClusterTasksRecord, ClusterType> CLUSTER_TYPE = createField(DSL.name("cluster_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.onyxdb.mdb.generated.jooq.enums.ClusterType.class), this, "");

    /**
     * The column <code>public.cluster_tasks.type</code>.
     */
    public final TableField<ClusterTasksRecord, ClusterTaskType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.onyxdb.mdb.generated.jooq.enums.ClusterTaskType.class), this, "");

    /**
     * The column <code>public.cluster_tasks.status</code>.
     */
    public final TableField<ClusterTasksRecord, ClusterTaskStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.onyxdb.mdb.generated.jooq.enums.ClusterTaskStatus.class), this, "");

    /**
     * The column <code>public.cluster_tasks.created_at</code>.
     */
    public final TableField<ClusterTasksRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.updated_at</code>.
     */
    public final TableField<ClusterTasksRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.scheduled_at</code>.
     */
    public final TableField<ClusterTasksRecord, LocalDateTime> SCHEDULED_AT = createField(DSL.name("scheduled_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.retries_left</code>.
     */
    public final TableField<ClusterTasksRecord, Integer> RETRIES_LEFT = createField(DSL.name("retries_left"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.depends_on_task_ids</code>.
     */
    public final TableField<ClusterTasksRecord, UUID[]> DEPENDS_ON_TASK_IDS = createField(DSL.name("depends_on_task_ids"), SQLDataType.UUID.getArrayDataType(), this, "");

    /**
     * The column <code>public.cluster_tasks.is_last</code>.
     */
    public final TableField<ClusterTasksRecord, Boolean> IS_LAST = createField(DSL.name("is_last"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private ClusterTasks(Name alias, Table<ClusterTasksRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClusterTasks(Name alias, Table<ClusterTasksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cluster_tasks</code> table reference
     */
    public ClusterTasks(String alias) {
        this(DSL.name(alias), CLUSTER_TASKS);
    }

    /**
     * Create an aliased <code>public.cluster_tasks</code> table reference
     */
    public ClusterTasks(Name alias) {
        this(alias, CLUSTER_TASKS);
    }

    /**
     * Create a <code>public.cluster_tasks</code> table reference
     */
    public ClusterTasks() {
        this(DSL.name("cluster_tasks"), null);
    }

    public <O extends Record> ClusterTasks(Table<O> child, ForeignKey<O, ClusterTasksRecord> key) {
        super(child, key, CLUSTER_TASKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClusterTasksRecord> getPrimaryKey() {
        return Keys.CLUSTER_TASKS_PKEY;
    }

    @Override
    public List<ForeignKey<ClusterTasksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLUSTER_TASKS__CLUSTER_TASKS_CLUSTER_ID_FKEY, Keys.CLUSTER_TASKS__CLUSTER_TASKS_OPERATION_ID_FKEY);
    }

    private transient Clusters _clusters;
    private transient ClusterOperations _clusterOperations;

    /**
     * Get the implicit join path to the <code>public.clusters</code> table.
     */
    public Clusters clusters() {
        if (_clusters == null)
            _clusters = new Clusters(this, Keys.CLUSTER_TASKS__CLUSTER_TASKS_CLUSTER_ID_FKEY);

        return _clusters;
    }

    /**
     * Get the implicit join path to the <code>public.cluster_operations</code>
     * table.
     */
    public ClusterOperations clusterOperations() {
        if (_clusterOperations == null)
            _clusterOperations = new ClusterOperations(this, Keys.CLUSTER_TASKS__CLUSTER_TASKS_OPERATION_ID_FKEY);

        return _clusterOperations;
    }

    @Override
    public ClusterTasks as(String alias) {
        return new ClusterTasks(DSL.name(alias), this);
    }

    @Override
    public ClusterTasks as(Name alias) {
        return new ClusterTasks(alias, this);
    }

    @Override
    public ClusterTasks as(Table<?> alias) {
        return new ClusterTasks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterTasks rename(String name) {
        return new ClusterTasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterTasks rename(Name name) {
        return new ClusterTasks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterTasks rename(Table<?> name) {
        return new ClusterTasks(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<UUID, UUID, UUID, ClusterType, ClusterTaskType, ClusterTaskStatus, LocalDateTime, LocalDateTime, LocalDateTime, Integer, UUID[], Boolean> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super UUID, ? super UUID, ? super UUID, ? super ClusterType, ? super ClusterTaskType, ? super ClusterTaskStatus, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super UUID[], ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super UUID, ? super UUID, ? super UUID, ? super ClusterType, ? super ClusterTaskType, ? super ClusterTaskStatus, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super UUID[], ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
