/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.mdb.generated.jooq.tables;


import com.onyxdb.mdb.generated.jooq.Keys;
import com.onyxdb.mdb.generated.jooq.Public;
import com.onyxdb.mdb.generated.jooq.enums.ClusterTaskStatus;
import com.onyxdb.mdb.generated.jooq.enums.ClusterTaskType;
import com.onyxdb.mdb.generated.jooq.enums.ClusterType;
import com.onyxdb.mdb.generated.jooq.tables.ClusterOperations.ClusterOperationsPath;
import com.onyxdb.mdb.generated.jooq.tables.ClusterTasksToBlockerTasks.ClusterTasksToBlockerTasksPath;
import com.onyxdb.mdb.generated.jooq.tables.Clusters.ClustersPath;
import com.onyxdb.mdb.generated.jooq.tables.records.ClusterTasksRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ClusterTasks extends TableImpl<ClusterTasksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cluster_tasks</code>
     */
    public static final ClusterTasks CLUSTER_TASKS = new ClusterTasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClusterTasksRecord> getRecordType() {
        return ClusterTasksRecord.class;
    }

    /**
     * The column <code>public.cluster_tasks.id</code>.
     */
    public final TableField<ClusterTasksRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.cluster_id</code>.
     */
    public final TableField<ClusterTasksRecord, UUID> CLUSTER_ID = createField(DSL.name("cluster_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.operation_id</code>.
     */
    public final TableField<ClusterTasksRecord, UUID> OPERATION_ID = createField(DSL.name("operation_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.cluster_type</code>.
     */
    public final TableField<ClusterTasksRecord, ClusterType> CLUSTER_TYPE = createField(DSL.name("cluster_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ClusterType.class), this, "");

    /**
     * The column <code>public.cluster_tasks.type</code>.
     */
    public final TableField<ClusterTasksRecord, ClusterTaskType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ClusterTaskType.class), this, "");

    /**
     * The column <code>public.cluster_tasks.status</code>.
     */
    public final TableField<ClusterTasksRecord, ClusterTaskStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ClusterTaskStatus.class), this, "");

    /**
     * The column <code>public.cluster_tasks.created_at</code>.
     */
    public final TableField<ClusterTasksRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.updated_at</code>.
     */
    public final TableField<ClusterTasksRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.scheduled_at</code>.
     */
    public final TableField<ClusterTasksRecord, LocalDateTime> SCHEDULED_AT = createField(DSL.name("scheduled_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.attempts_left</code>.
     */
    public final TableField<ClusterTasksRecord, Integer> ATTEMPTS_LEFT = createField(DSL.name("attempts_left"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.is_first</code>.
     */
    public final TableField<ClusterTasksRecord, Boolean> IS_FIRST = createField(DSL.name("is_first"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.cluster_tasks.is_last</code>.
     */
    public final TableField<ClusterTasksRecord, Boolean> IS_LAST = createField(DSL.name("is_last"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private ClusterTasks(Name alias, Table<ClusterTasksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ClusterTasks(Name alias, Table<ClusterTasksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.cluster_tasks</code> table reference
     */
    public ClusterTasks(String alias) {
        this(DSL.name(alias), CLUSTER_TASKS);
    }

    /**
     * Create an aliased <code>public.cluster_tasks</code> table reference
     */
    public ClusterTasks(Name alias) {
        this(alias, CLUSTER_TASKS);
    }

    /**
     * Create a <code>public.cluster_tasks</code> table reference
     */
    public ClusterTasks() {
        this(DSL.name("cluster_tasks"), null);
    }

    public <O extends Record> ClusterTasks(Table<O> path, ForeignKey<O, ClusterTasksRecord> childPath, InverseForeignKey<O, ClusterTasksRecord> parentPath) {
        super(path, childPath, parentPath, CLUSTER_TASKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ClusterTasksPath extends ClusterTasks implements Path<ClusterTasksRecord> {
        public <O extends Record> ClusterTasksPath(Table<O> path, ForeignKey<O, ClusterTasksRecord> childPath, InverseForeignKey<O, ClusterTasksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ClusterTasksPath(Name alias, Table<ClusterTasksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ClusterTasksPath as(String alias) {
            return new ClusterTasksPath(DSL.name(alias), this);
        }

        @Override
        public ClusterTasksPath as(Name alias) {
            return new ClusterTasksPath(alias, this);
        }

        @Override
        public ClusterTasksPath as(Table<?> alias) {
            return new ClusterTasksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClusterTasksRecord> getPrimaryKey() {
        return Keys.CLUSTER_TASKS_PKEY;
    }

    @Override
    public List<ForeignKey<ClusterTasksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLUSTER_TASKS__CLUSTER_TASKS_CLUSTER_ID_FKEY, Keys.CLUSTER_TASKS__CLUSTER_TASKS_OPERATION_ID_FKEY);
    }

    private transient ClustersPath _clusters;

    /**
     * Get the implicit join path to the <code>public.clusters</code> table.
     */
    public ClustersPath clusters() {
        if (_clusters == null)
            _clusters = new ClustersPath(this, Keys.CLUSTER_TASKS__CLUSTER_TASKS_CLUSTER_ID_FKEY, null);

        return _clusters;
    }

    private transient ClusterOperationsPath _clusterOperations;

    /**
     * Get the implicit join path to the <code>public.cluster_operations</code>
     * table.
     */
    public ClusterOperationsPath clusterOperations() {
        if (_clusterOperations == null)
            _clusterOperations = new ClusterOperationsPath(this, Keys.CLUSTER_TASKS__CLUSTER_TASKS_OPERATION_ID_FKEY, null);

        return _clusterOperations;
    }

    private transient ClusterTasksToBlockerTasksPath _clusterTasksToBlockerTasksBlockerTaskIdFkey;

    /**
     * Get the implicit to-many join path to the
     * <code>public.cluster_tasks_to_blocker_tasks</code> table, via the
     * <code>cluster_tasks_to_blocker_tasks_blocker_task_id_fkey</code> key
     */
    public ClusterTasksToBlockerTasksPath clusterTasksToBlockerTasksBlockerTaskIdFkey() {
        if (_clusterTasksToBlockerTasksBlockerTaskIdFkey == null)
            _clusterTasksToBlockerTasksBlockerTaskIdFkey = new ClusterTasksToBlockerTasksPath(this, null, Keys.CLUSTER_TASKS_TO_BLOCKER_TASKS__CLUSTER_TASKS_TO_BLOCKER_TASKS_BLOCKER_TASK_ID_FKEY.getInverseKey());

        return _clusterTasksToBlockerTasksBlockerTaskIdFkey;
    }

    private transient ClusterTasksToBlockerTasksPath _clusterTasksToBlockerTasksTaskIdFkey;

    /**
     * Get the implicit to-many join path to the
     * <code>public.cluster_tasks_to_blocker_tasks</code> table, via the
     * <code>cluster_tasks_to_blocker_tasks_task_id_fkey</code> key
     */
    public ClusterTasksToBlockerTasksPath clusterTasksToBlockerTasksTaskIdFkey() {
        if (_clusterTasksToBlockerTasksTaskIdFkey == null)
            _clusterTasksToBlockerTasksTaskIdFkey = new ClusterTasksToBlockerTasksPath(this, null, Keys.CLUSTER_TASKS_TO_BLOCKER_TASKS__CLUSTER_TASKS_TO_BLOCKER_TASKS_TASK_ID_FKEY.getInverseKey());

        return _clusterTasksToBlockerTasksTaskIdFkey;
    }

    @Override
    public ClusterTasks as(String alias) {
        return new ClusterTasks(DSL.name(alias), this);
    }

    @Override
    public ClusterTasks as(Name alias) {
        return new ClusterTasks(alias, this);
    }

    @Override
    public ClusterTasks as(Table<?> alias) {
        return new ClusterTasks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterTasks rename(String name) {
        return new ClusterTasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterTasks rename(Name name) {
        return new ClusterTasks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterTasks rename(Table<?> name) {
        return new ClusterTasks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasks where(Condition condition) {
        return new ClusterTasks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ClusterTasks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ClusterTasks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ClusterTasks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ClusterTasks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ClusterTasks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
