/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.mdb.generated.jooq.tables;


import com.onyxdb.mdb.generated.jooq.Keys;
import com.onyxdb.mdb.generated.jooq.Public;
import com.onyxdb.mdb.generated.jooq.enums.ClusterTaskStatus;
import com.onyxdb.mdb.generated.jooq.enums.ClusterOperationType;
import com.onyxdb.mdb.generated.jooq.tables.records.ClusterOperationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClusterOperation extends TableImpl<ClusterOperationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cluster_operation</code>
     */
    public static final ClusterOperation CLUSTER_OPERATION = new ClusterOperation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClusterOperationRecord> getRecordType() {
        return ClusterOperationRecord.class;
    }

    /**
     * The column <code>public.cluster_operation.id</code>.
     */
    public final TableField<ClusterOperationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cluster_operation.cluster_id</code>.
     */
    public final TableField<ClusterOperationRecord, UUID> CLUSTER_ID = createField(DSL.name("cluster_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cluster_operation.type</code>.
     */
    public final TableField<ClusterOperationRecord, ClusterOperationType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.onyxdb.mdb.generated.jooq.enums.ClusterOperationType.class), this, "");

    /**
     * The column <code>public.cluster_operation.status</code>.
     */
    public final TableField<ClusterOperationRecord, ClusterTaskStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ClusterTaskStatus.class), this, "");

    /**
     * The column <code>public.cluster_operation.created_at</code>.
     */
    public final TableField<ClusterOperationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.cluster_operation.retries</code>.
     */
    public final TableField<ClusterOperationRecord, Integer> RETRIES = createField(DSL.name("retries"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.cluster_operation.execute_at</code>.
     */
    public final TableField<ClusterOperationRecord, LocalDateTime> EXECUTE_AT = createField(DSL.name("execute_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private ClusterOperation(Name alias, Table<ClusterOperationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClusterOperation(Name alias, Table<ClusterOperationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cluster_operation</code> table reference
     */
    public ClusterOperation(String alias) {
        this(DSL.name(alias), CLUSTER_OPERATION);
    }

    /**
     * Create an aliased <code>public.cluster_operation</code> table reference
     */
    public ClusterOperation(Name alias) {
        this(alias, CLUSTER_OPERATION);
    }

    /**
     * Create a <code>public.cluster_operation</code> table reference
     */
    public ClusterOperation() {
        this(DSL.name("cluster_operation"), null);
    }

    public <O extends Record> ClusterOperation(Table<O> child, ForeignKey<O, ClusterOperationRecord> key) {
        super(child, key, CLUSTER_OPERATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClusterOperationRecord> getPrimaryKey() {
        return Keys.CLUSTER_OPERATION_PKEY;
    }

    @Override
    public List<ForeignKey<ClusterOperationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLUSTER_OPERATION__CLUSTER_OPERATION_CLUSTER_ID_FKEY);
    }

    private transient Cluster _cluster;

    /**
     * Get the implicit join path to the <code>public.cluster</code> table.
     */
    public Cluster cluster() {
        if (_cluster == null)
            _cluster = new Cluster(this, Keys.CLUSTER_OPERATION__CLUSTER_OPERATION_CLUSTER_ID_FKEY);

        return _cluster;
    }

    @Override
    public ClusterOperation as(String alias) {
        return new ClusterOperation(DSL.name(alias), this);
    }

    @Override
    public ClusterOperation as(Name alias) {
        return new ClusterOperation(alias, this);
    }

    @Override
    public ClusterOperation as(Table<?> alias) {
        return new ClusterOperation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterOperation rename(String name) {
        return new ClusterOperation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterOperation rename(Name name) {
        return new ClusterOperation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClusterOperation rename(Table<?> name) {
        return new ClusterOperation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, ClusterOperationType, ClusterTaskStatus, LocalDateTime, Integer, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super UUID, ? super ClusterOperationType, ? super ClusterTaskStatus, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super UUID, ? super ClusterOperationType, ? super ClusterTaskStatus, ? super LocalDateTime, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
