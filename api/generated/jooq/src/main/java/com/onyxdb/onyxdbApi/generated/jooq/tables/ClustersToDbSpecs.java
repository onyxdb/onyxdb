/*
 * This file is generated by jOOQ.
 */
package com.onyxdb.onyxdbApi.generated.jooq.tables;


import com.onyxdb.onyxdbApi.generated.jooq.Keys;
import com.onyxdb.onyxdbApi.generated.jooq.Public;
import com.onyxdb.onyxdbApi.generated.jooq.enums.ClusterDbType;
import com.onyxdb.onyxdbApi.generated.jooq.tables.records.ClustersToDbSpecsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClustersToDbSpecs extends TableImpl<ClustersToDbSpecsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.clusters_to_db_specs</code>
     */
    public static final ClustersToDbSpecs CLUSTERS_TO_DB_SPECS = new ClustersToDbSpecs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClustersToDbSpecsRecord> getRecordType() {
        return ClustersToDbSpecsRecord.class;
    }

    /**
     * The column <code>public.clusters_to_db_specs.cluster_id</code>.
     */
    public final TableField<ClustersToDbSpecsRecord, UUID> CLUSTER_ID = createField(DSL.name("cluster_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.clusters_to_db_specs.type</code>.
     */
    public final TableField<ClustersToDbSpecsRecord, ClusterDbType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.onyxdb.onyxdbApi.generated.jooq.enums.ClusterDbType.class), this, "");

    /**
     * The column <code>public.clusters_to_db_specs.spec</code>.
     */
    public final TableField<ClustersToDbSpecsRecord, JSONB> SPEC = createField(DSL.name("spec"), SQLDataType.JSONB.nullable(false), this, "");

    private ClustersToDbSpecs(Name alias, Table<ClustersToDbSpecsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClustersToDbSpecs(Name alias, Table<ClustersToDbSpecsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.clusters_to_db_specs</code> table
     * reference
     */
    public ClustersToDbSpecs(String alias) {
        this(DSL.name(alias), CLUSTERS_TO_DB_SPECS);
    }

    /**
     * Create an aliased <code>public.clusters_to_db_specs</code> table
     * reference
     */
    public ClustersToDbSpecs(Name alias) {
        this(alias, CLUSTERS_TO_DB_SPECS);
    }

    /**
     * Create a <code>public.clusters_to_db_specs</code> table reference
     */
    public ClustersToDbSpecs() {
        this(DSL.name("clusters_to_db_specs"), null);
    }

    public <O extends Record> ClustersToDbSpecs(Table<O> child, ForeignKey<O, ClustersToDbSpecsRecord> key) {
        super(child, key, CLUSTERS_TO_DB_SPECS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<ClustersToDbSpecsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CLUSTERS_TO_DB_SPECS_CLUSTER_ID_KEY);
    }

    @Override
    public List<ForeignKey<ClustersToDbSpecsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLUSTERS_TO_DB_SPECS__CLUSTERS_TO_DB_SPECS_CLUSTER_ID_FKEY);
    }

    private transient Clusters _clusters;

    /**
     * Get the implicit join path to the <code>public.clusters</code> table.
     */
    public Clusters clusters() {
        if (_clusters == null)
            _clusters = new Clusters(this, Keys.CLUSTERS_TO_DB_SPECS__CLUSTERS_TO_DB_SPECS_CLUSTER_ID_FKEY);

        return _clusters;
    }

    @Override
    public ClustersToDbSpecs as(String alias) {
        return new ClustersToDbSpecs(DSL.name(alias), this);
    }

    @Override
    public ClustersToDbSpecs as(Name alias) {
        return new ClustersToDbSpecs(alias, this);
    }

    @Override
    public ClustersToDbSpecs as(Table<?> alias) {
        return new ClustersToDbSpecs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClustersToDbSpecs rename(String name) {
        return new ClustersToDbSpecs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClustersToDbSpecs rename(Name name) {
        return new ClustersToDbSpecs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClustersToDbSpecs rename(Table<?> name) {
        return new ClustersToDbSpecs(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, ClusterDbType, JSONB> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super ClusterDbType, ? super JSONB, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super ClusterDbType, ? super JSONB, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
