openapi: 3.0.0
info:
  version: 1.0.0
  title: onyxdb-mdb
servers:
  - url: http://localhost:9001
    description: localhost
paths:
  # ---------- v1ResourcePresets ----------
  /api/v1/resource-presets:
    get:
      summary: Get resource presets
      operationId: listResourcePresets
      tags:
        - v1ResourcePresets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ListResourcePresetsResponse'
    post:
      summary: Create resource preset
      operationId: createResourcePreset
      tags:
        - v1ResourcePresets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1CreateResourcePresetRequest'
      responses:
        '200':
          description: OK
  /api/v1/resource-presets/{resourcePresetId}:
    get:
      summary: Get resource preset
      operationId: getResourcePreset
      tags:
        - v1ResourcePresets
      parameters:
        - $ref: '#/components/parameters/ResourcePresetIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ResourcePresetResponse'
    put:
      summary: Update resource preset
      operationId: updateResourcePreset
      tags:
        - v1ResourcePresets
      parameters:
        - $ref: '#/components/parameters/ResourcePresetIdPV'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1UpdateResourcePresetRequest'
      responses:
        '200':
          description: OK
    delete:
      summary: Delete resource preset
      operationId: deleteResourcePreset
      tags:
        - v1ResourcePresets
      parameters:
        - $ref: '#/components/parameters/ResourcePresetIdPV'
      responses:
        '200':
          description: OK

  # ---------- v1Zones ----------
#  /api/v1/zones:
#    get:
#      summary: Get zones
#      operationId: listZones
#      tags:
#        - v1Zones
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/V1ListZonesResponse'
#    post:
#      summary: Create zone
#      operationId: createZone
#      tags:
#        - v1Zones
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/V1CreateZoneRequest'
#      responses:
#        '200':
#          description: OK
#  /api/v1/zones/{zoneId}:
#    get:
#      summary: Get zone
#      operationId: getZone
#      tags:
#        - v1Zones
#      parameters:
#        - $ref: '#/components/parameters/ZoneIdPV'
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/V1ZoneResponse'
#    put:
#      summary: Update zone
#      operationId: updateZone
#      tags:
#        - v1Zones
#      parameters:
#        - $ref: '#/components/parameters/ZoneIdPV'
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/V1UpdateZoneRequest'
#      responses:
#        '200':
#          description: OK
#    delete:
#      summary: Delete zone
#      operationId: deleteZone
#      tags:
#        - v1Zones
#      parameters:
#        - $ref: '#/components/parameters/ZoneIdPV'
#      responses:
#        '200':
#          description: OK

  # ---------- Projects ----------
  /api/projects/v1:
    get:
      summary: List projects
      operationId: listProjects
      tags:
        - Projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ListProjectsResponse'
    post:
      summary: Create project
      operationId: createProject
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1CreateProjectRequest'
      responses:
        '200':
          description: OK
  /api/projects/v1/{projectId}:
    get:
      summary: Get project
      operationId: getProject
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ProjectResponse'
    put:
      summary: Update project
      operationId: updateProject
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectIdPV'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1UpdateProjectRequest'
      responses:
        '200':
          description: OK
  /api/projects/v1/{projectId}/archive:
    put:
      summary: Archive project
      operationId: archiveProject
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectIdPV'
      responses:
        '200':
          description: OK
  /api/projects/v1/{projectId}/unarchive:
    put:
      summary: Unarchive project
      operationId: unarchiveProject
      tags:
        - Projects
      parameters:
        - $ref: '#/components/parameters/ProjectIdPV'
      responses:
        '200':
          description: OK

  # ---------- v1ManagedMongoDb ----------
  /api/v1/managed-mongodb/clusters:
    get:
      summary: Get MongoDB clusters
      operationId: listClusters
      tags:
        - v1ManagedMongoDb
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ListMongoClustersResponse'
    post:
      summary: Create MongoDB cluster
      operationId: createCluster
      tags:
        - v1ManagedMongoDb
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1CreateMongoClusterRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1CreateMongoClusterResponse'
  /api/v1/managed-mongodb/clusters/{clusterId}:
    get:
      summary: Get MongoDB cluster
      operationId: getCluster
      tags:
        - v1ManagedMongoDb
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1MongoClusterResponse'
    put:
      summary: Update MongoDB cluster
      operationId: updateCluster
      tags:
        - v1ManagedMongoDb
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1MongoUpdateClusterRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ScheduledOperationResponse'
    delete:
      summary: Delete MongoDB cluster
      operationId: deleteCluster
      tags:
        - v1ManagedMongoDb
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1DeleteMongoClusterResponse'
  /api/managed-mongodb/v1/clusters/{clusterId}/hosts:
    get:
      summary: Get MongoDB hosts
      operationId: listHosts
      tags:
        - v1ManagedMongoDb
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MongoListHostsResponse'
  #    put:
  #      summary: Scale MongoDB hosts
  #      operationId: scaleHosts
  #      tags:
  #        - v1ManagedMongoDb
  #      parameters:
  #        - $ref: '#/components/parameters/ClusterIdPV'
  #      requestBody:
  #        required: true
  #        content:
  #          application/json:
  #            schema:
  #              $ref: '#/components/schemas/V1MongoScaleHostsRequest'
  #      responses:
  #        '200':
  #          description: OK
  #          content:
  #            application/json:
  #              schema:
  #                $ref: '#/components/schemas/V1ScheduledOperationResponse'
  #  /api/managed-mongodb/v1/hosts:
  # ---------- Managed MongoDB databases -------------------------------------------------------------------------------
  /api/managed-mongodb/v1/clusters/{clusterId}/databases:
    get:
      summary: List MongoDB databases
      operationId: listDatabases
      tags:
        - Managed MongoDB databases
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMongoDatabasesResponse'
    post:
      summary: Create MongoDB database
      operationId: createDatabase
      tags:
        - Managed MongoDB databases
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMongoDatabaseRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ScheduledOperationResponse'
  /api/managed-mongodb/v1/clusters/{clusterId}/databases/{databaseId}:
    delete:
      summary: Delete MongoDB database
      operationId: deleteDatabase
      tags:
        - Managed MongoDB databases
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
        - $ref: '#/components/parameters/DatabaseIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ScheduledOperationResponse'
  # ---------- Managed MongoDB users -----------------------------------------------------------------------------------
  /api/managed-mongodb/v1/users/roles:
    get:
      summary: List available MongoDB roles
      operationId: listRoles
      tags:
        - Managed MongoDB users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMongoRolesResponse'
  /api/managed-mongodb/v1/clusters/{clusterId}/users:
    get:
      summary: List MongoDB users in cluster
      operationId: listUsers
      tags:
        - Managed MongoDB users
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMongoUsersResponse'
    post:
      summary: Create MongoDB user in cluster
      operationId: createUser
      tags:
        - Managed MongoDB users
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MongoUserToCreate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ScheduledOperationResponse'
  /api/managed-mongodb/v1/clusters/users/{userId}:
    get:
      summary: Get MongoDB user
      operationId: getUser
      tags:
        - Managed MongoDB users
      parameters:
        - $ref: '#/components/parameters/UserIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MongoUser'
    delete:
      summary: Delete MongoDB user
      operationId: deleteUser
      tags:
        - Managed MongoDB users
      parameters:
        - $ref: '#/components/parameters/UserIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ScheduledOperationResponse'
  # ---------- Managed MongoDB backups ---------------------------------------------------------------------------------
  /api/managed-mongodb/v1/clusters/{clusterId}/backups:
    get:
      summary: List backups of MongoDB cluster
      operationId: listBackups
      tags:
        - Managed MongoDB backups
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMongoBackupsResponse'
    post:
      summary: Create backup of MongoDB cluster
      operationId: createBackup
      tags:
        - Managed MongoDB backups
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ScheduledOperationResponse'
  /api/managed-mongodb/v1/clusters/{clusterId}/backups/{backupName}:
    delete:
      summary: Delete backup of MongoDB cluster
      operationId: deleteBackup
      tags:
        - Managed MongoDB backups
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
        - $ref: '#/components/parameters/BackupNamePV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ScheduledOperationResponse'
  /api/managed-mongodb/v1/clusters/{clusterId}/backups/{backupName}/restore:
    post:
      summary: Restore MongoDB cluster from backup
      operationId: restoreFromBackup
      tags:
        - Managed MongoDB backups
      parameters:
        - $ref: '#/components/parameters/ClusterIdPV'
        - $ref: '#/components/parameters/BackupNamePV'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ScheduledOperationResponse'
  # ---------- Managed MongoDB internals -------------------------------------------------------------------------------
  /api/managed-mongodb/v1/internal/hosts:
    put:
      summary: Update MongoDB hosts
      operationId: updateHosts
      tags:
        - Managed MongoDB internals
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMongoHostsRequest'
      responses:
        '200':
          description: OK
  # ---------- MDB Quotas ----------------------------------------------------------------------------------------------
  /api/quotas/mdb/by-products:
    get:
      summary: List MDB quotas by products
      operationId: listQuotasByProducts
      tags:
        - MDB quotas
      parameters:
        - $ref: '#/components/parameters/ProductIdsOQP'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQuotasByProductsResponse'
  /api/quotas/mdb/upload-to-products:
    put:
      summary: Upload MDB quotas to multiple products
      operationId: uploadQuotasToProducts
      tags:
        - MDB quotas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadQuotasToProductsRequest'
      responses:
        '200':
          description: OK
  /api/quotas/mdb/transfer-between-products:
    put:
      summary: Exchange MDB quotas between products
      operationId: transferQuotasBetweenProducts
      tags:
        - MDB quotas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferQuotasBetweenProductsRequest'
      responses:
        '200':
          description: OK
  /api/quotas/mdb/simulate-transfer-between-products:
    post:
      summary: Simulate transfer of MDB quotas between products
      operationId: simulateTransferQuotasBetweenProducts
      tags:
        - MDB quotas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferQuotasBetweenProductsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulateTransferQuotasBetweenProductsResponse'
  /api/quotas/mdb/resources:
    get:
      summary: List MDB resources
      operationId: listResources
      tags:
        - MDB quotas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResourcesResponse'
  /api/quotas/mdb/managed-mongodb/simulate-usage:
    post:
      summary: Simulate usage of quotas for MongoDB cluster
      operationId: simulateMongoDbQuotasUsage
      tags:
        - MDB quotas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulateMongoDBQuotasUsageRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulateMongoDBQuotasUsageResponse'
  # ---------- Operations ----------------------------------------------------------------------------------------------
  /api/operations:
    get:
      summary: List operations
      operationId: listOperations
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/ClusterIdOQP'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponseOA'
  /api/operations/{operationId}/restart:
    put:
      summary: Restart operation
      operationId: restartOperation
      tags:
        - Operations
      parameters:
        - $ref: '#/components/parameters/OperationIdPV'
      responses:
        '200':
          description: OK
  # ---------- Billing -------------------------------------------------------------------------------------------------
  /api/billing/product-quota-usage-report:
    get:
      summary: Get product quota usage report
      operationId: getProductQuotaUsageReport
      tags:
        - Billing
      parameters:
        - $ref: '#/components/parameters/ProductIdRQP'
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProductQuotaUsageReportResponseOA'
# ---------- components ------------------------------------------------------------------------------------------------
components:
  # ---------- schemas -------------------------------------------------------------------------------------------------
  schemas:
    V1BadRequestResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    # ---------- v1ResourcePresets schemas ----------
    V1ListResourcePresetsResponse:
      type: object
      properties:
        resourcePresets:
          type: array
          items:
            $ref: '#/components/schemas/V1ResourcePresetResponse'
      required:
        - resourcePresets
    V1ResourcePresetResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: '#/components/schemas/V1ResourcePresetType'
        vcpu:
          type: number
          format: double
        ram:
          type: integer
          format: int64
      required:
        - id
        - name
        - type
        - vcpu
        - ram
    V1CreateResourcePresetRequest:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/V1ResourcePresetType'
        vcpu:
          type: number
          format: double
        ram:
          type: integer
          format: int64
      required:
        - name
        - type
        - vcpu
        - ram
    V1UpdateResourcePresetRequest:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/V1ResourcePresetType'
        vcpu:
          type: number
          format: double
        ram:
          type: integer
          format: int64
      required:
        - name
        - type
        - vcpu
        - ram
    V1ResourcePresetType:
      type: string
      enum:
        - cpu_optimized
        - standard
        - ram_optimized
    V1ListZonesResponse:
      type: object
      properties:
        zones:
          type: array
          items:
            $ref: '#/components/schemas/V1ZoneResponse'
      required:
        - zones
    V1ZoneResponse:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        selector:
          type: string
      required:
        - id
        - description
        - selector
    V1CreateZoneRequest:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        selector:
          type: string
      required:
        - id
        - description
        - selector
    V1UpdateZoneRequest:
      type: object
      properties:
        description:
          type: string
        selector:
          type: string
      required:
        - description
        - selector
    V1ListProjectsResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/V1ProjectResponse'
      required:
        - projects
    V1ProjectResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        productId:
          type: string
          format: uuid
        isArchived:
          type: boolean
      required:
        - id
        - name
        - description
        - productId
        - isArchived
    V1CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        productId:
          type: string
          format: uuid
      required:
        - name
        - description
        - productId
    V1UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
        - description
    V1ListMongoClustersResponse:
      type: object
      properties:
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/V1MongoClusterResponse'
      required:
        - clusters
    V1MongoClusterResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/V1ClusterStatusResponse'
        projectId:
          type: string
          format: uuid
        config:
          $ref: '#/components/schemas/V1MongoConfig'
      required:
        - id
        - name
        - description
        - status
        - projectId
        - config
    V1DeleteMongoClusterResponse:
      type: object
      properties:
        operationId:
          type: string
          format: uuid
      required:
        - operationId
    V1ClusterStatusResponse:
      type: object
      properties:
        value:
          type: string
        message:
          type: string
      required:
        - value
        - message
    V1MongoConfig:
      type: object
      properties:
        #        version:
        #          type: string
        resources:
          $ref: '#/components/schemas/V1ClusterResources'
        replicas:
          type: integer
          format: int32
      #        mongodbV8d0:
      #          $ref: '#/components/schemas/V1MongoConfigV8d0'
      required:
        - resources
        - replicas
    #    V1MongoConfigV8d0:
    #      type: object
    #      properties:
    #        mongod:
    #          $ref: '#/components/schemas/V1MongodV8d0'
    #      required:
    #        - mongod
    #    V1MongodV8d0:
    #      type: object
    #      properties:
    #        resources:
    #          $ref: '#/components/schemas/V1ClusterResources'
    #        config:
    #          $ref: '#/components/schemas/V1MongodConfigV8d0'
    #      required:
    #        - resources
    #        - config
    V1ClusterResources:
      type: object
      properties:
        presetId:
          type: string
          format: uuid
        storageClass:
          type: string
        storage:
          type: integer
          format: int64
      required:
        - presetId
        - storageClass
        - storage
    #    V1MongodConfigV8d0:
    #      type: object
    #      properties:
    #        net:
    #          $ref: '#/components/schemas/V1MongodNetV8d0'
    #      required:
    #        - net
    #    V1MongodNetV8d0:
    #      type: object
    #      properties:
    #        maxIncomingConnections:
    #          type: integer
    #          format: int32
    #      required:
    #        - maxIncomingConnections
    V1CreateMongoClusterRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        projectId:
          type: string
          format: uuid
        config:
          $ref: '#/components/schemas/V1MongoConfig'
        database:
          $ref: '#/components/schemas/InitMongoDatabase'
        user:
          $ref: '#/components/schemas/InitMongoUser'
      required:
        - name
        - description
        - projectId
        - config
        - database
        - user
    InitMongoDatabase:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    InitMongoUser:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
      required:
        - name
        - password
    V1CreateMongoClusterResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - id
    MongoListHostsResponse:
      type: object
      properties:
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/MongoHost'
      required:
        - hosts
    V1MongoScaleHostsRequest:
      type: object
      properties:
        replicas:
          type: integer
      required:
        - replicas
    V1ScheduledOperationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - id
    V1MongoUpdateClusterRequest:
      type: object
      properties:
        name:
          type: string
        config:
          $ref: '#/components/schemas/V1MongoConfig'
      required:
        - name
        - description
        - config
    UpdateMongoHostsRequest:
      type: object
      properties:
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/MongoHost'
    MongoHost:
      type: object
      properties:
        name:
          type: string
        clusterId:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/MongoHostType'
        status:
          $ref: '#/components/schemas/MongoHostStatus'
        role:
          $ref: '#/components/schemas/MongoHostRole'
      required:
        - name
        - clusterId
        - type
        - status
        - role
    MongoHostType:
      type: string
      enum:
        - unknown
        - mongod
    MongoHostStatus:
      type: string
      enum:
        - unknown
        - alive
        - dead
    MongoHostRole:
      type: string
      enum:
        - unknown
        - primary
        - secondary
    CreateMongoDatabaseRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    ListMongoDatabasesResponse:
      type: object
      properties:
        databases:
          type: array
          items:
            $ref: '#/components/schemas/MongoDatabase'
      required:
        - databases
    MongoDatabase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        clusterId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        isDeleted:
          type: boolean
        deletedAt:
          type: string
          format: date-time
          nullable: true
        deletedBy:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
        - clusterId
        - createdAt
        - createdBy
        - isDeleted
        - deletedAt
        - deletedBy
    ListMongoUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/MongoUser'
      required:
        - users
    MongoUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        clusterId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        isDeleted:
          type: boolean
        deletedAt:
          type: string
          format: date-time
          nullable: true
        deletedBy:
          type: string
          format: uuid
          nullable: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/MongoPermission'
      required:
        - id
        - name
        - clusterId
        - createdAt
        - createdBy
        - isDeleted
        - deletedAt
        - deletedBy
        - permissions
    MongoPermission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        databaseId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        isDeleted:
          type: boolean
        deletedAt:
          type: string
          format: date-time
          nullable: true
        deletedBy:
          type: string
          format: uuid
          nullable: true
        roles:
          type: array
          items:
            type: string
      required:
        - id
        - databaseId
        - createdAt
        - createdBy
        - isDeleted
        - deletedAt
        - deletedBy
        - roles
    MongoUserToCreate:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/MongoPermissionToCreate'
      required:
        - name
        - password
        - permissions
    MongoPermissionToCreate:
      type: object
      properties:
        databaseId:
          type: string
          format: uuid
        roles:
          type: array
          items:
            type: string
      required:
        - databaseId
        - roles
    ListMongoBackupsResponse:
      type: object
      properties:
        backups:
          type: array
          items:
            $ref: '#/components/schemas/MongoBackup'
      required:
        - backups
    MongoBackup:
      type: object
      properties:
        name:
          type: string
        clusterId:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/BackupType'
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
      required:
        - name
        - clusterId
        - type
        - startedAt
        - finishedAt
    BackupType:
      type: string
      enum:
        - automated
        - manual
    ListMongoRolesResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
      required:
        - roles
    ListQuotasByProductResponse:
      type: object
      properties:
        quotas:
          type: array
          items:
            $ref: '#/components/schemas/Quota'
      required:
        - quotas
    ListQuotasByProductsResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductQuotas'
      required:
        - products
    Quota:
      type: object
      properties:
        resource:
          $ref: '#/components/schemas/Resource'
        limit:
          type: integer
          format: int64
          minimum: 0
        usage:
          type: integer
          format: int64
          minimum: 0
        free:
          type: integer
          format: int64
      required:
        - resource
        - limit
        - usage
        - free
    ProductQuotas:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        quotas:
          type: array
          items:
            $ref: '#/components/schemas/Quota'
      required:
        - productId
        - quotas
    Resource:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/ResourceType'
        unit:
          $ref: '#/components/schemas/ResourceUnit'
      required:
        - id
        - name
        - description
        - type
        - unit
    ResourceType:
      type: string
      enum:
        - vcpu
        - ram
    ResourceUnit:
      type: string
      enum:
        - cores
        - bytes
    SimulateMongoDBQuotasUsageRequest:
      type: object
      properties:
        projectId:
          type: string
          format: uuid
        config:
          $ref: '#/components/schemas/V1MongoConfig'
      required:
        - projectId
        - config
    SimulateMongoDBQuotasUsageResponse:
      type: object
      properties:
        quotas:
          type: array
          items:
            $ref: '#/components/schemas/Quota'
      required:
        - quotas
    UploadQuotasToProductsRequest:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductQuotasToTransfer'
      required:
        - products
    ProductQuotasToTransfer:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        quotas:
          type: array
          items:
            $ref: '#/components/schemas/QuotaToTransfer'
      required:
        - productId
        - quotas
    QuotaToTransfer:
      type: object
      properties:
        resourceId:
          type: string
          format: uuid
        limit:
          type: integer
          format: int64
          minimum: 0
      required:
        - resourceId
        - limit
    TransferQuotasBetweenProductsRequest:
      type: object
      properties:
        srcProductId:
          type: string
          format: uuid
        dstProductId:
          type: string
          format: uuid
        quotas:
          type: array
          items:
            $ref: '#/components/schemas/QuotaToTransfer'
      required:
        - srcProductId
        - dstProductId
        - quotas
    SimulateTransferQuotasBetweenProductsResponse:
      type: object
      properties:
        srcProduct:
          $ref: '#/components/schemas/ProductQuotas'
        dstProduct:
          $ref: '#/components/schemas/ProductQuotas'
      required:
        - srcProduct
        - dstProduct
    ListResourcesResponse:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
      required:
        - resources
    GetProductQuotaUsageReportResponseOA:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ProductQuotaUsageByResourceOA'
      required:
        - resources
    ProductQuotaUsageByResourceOA:
      type: object
      properties:
        resource:
          $ref: '#/components/schemas/Resource'
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductQuotaUsageReportItemOA'
      required:
        - resource
        - items
    ProductQuotaUsageReportItemOA:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        quotaProvider:
          type: string
        limit:
          type: integer
          format: int64
        usage:
          type: integer
          format: int64
        free:
          type: integer
          format: int64
        timestamp:
          type: integer
          format: int64
      required:
        - productId
        - quotaProvider
        - limit
        - usage
        - free
        - timestamp
    ListOperationsResponseOA:
      type: object
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/OperationOA'
      required:
        - operations
    OperationOA:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/OperationTypeOA'
        status:
          $ref: '#/components/schemas/OperationStatusOA'
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
        updatedAt:
          type: string
          format: date-time
        isRestartAllowed:
          type: boolean
      required:
        - id
        - type
        - status
        - createdAt
        - createdBy
        - updatedAt
        - isRestartAllowed
    OperationTypeOA:
      type: object
      properties:
        value:
          type: string
        displayValue:
          type: string
      required:
        - value
        - displayValue
    OperationStatusOA:
      type: object
      properties:
        value:
          type: string
        displayValue:
          type: string
      required:
        - value
        - displayValue
  # ---------- parameters ----------------------------------------------------------------------------------------------
  parameters:
    ResourcePresetIdPV:
      name: resourcePresetId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ZoneIdPV:
      name: zoneId
      in: path
      required: true
      schema:
        type: string
    ProjectIdPV:
      name: projectId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ClusterIdPV:
      name: clusterId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ClusterIdOQP:
      name: clusterId
      in: query
      required: false
      schema:
        type: string
        format: uuid
    DatabaseIdPV:
      name: databaseId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    UserIdPV:
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    BackupNamePV:
      name: backupName
      in: path
      required: true
      schema:
        type: string
    QuotaIdPV:
      name: quotaId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ProductIdRQP:
      name: productId
      in: query
      required: true
      schema:
        type: string
        format: uuid
    ProductIdsOQP:
      name: productIds
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          format: uuid
    OperationIdPV:
      name: operationId
      in: path
      required: true
      schema:
        type: string
        format: uuid
